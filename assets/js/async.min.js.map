{"version":3,"file":"async.min.js","names":["global","factory","exports","module","define","amd","async","this","apply","fn","args","callArgs","initialParams","callback","pop","call","hasSetImmediate","setImmediate","hasNextTick","process","nextTick","fallback","setTimeout","wrap","defer","setImmediate$1","asyncify","func","isAsync","handlePromise","result","e","then","promise","value","invokeCallback","err","message","Error","error","Symbol","toStringTag","wrapAsync","asyncFn","awaitify","arity","length","Promise","resolve","reject","cbArgs","applyEach","eachfn","fns","that","cb","concat","_asyncMap","arr","iteratee","results","counter","_iteratee","_","iterCb","index","v","isArrayLike","breakLoop","once","wrapper","callFn","Object","assign","createIterator","coll","i","len","key","createArrayIterator","obj","okeys","iterator","getIterator","item","next","done","createES2015Iterator","keys","onlyOnce","asyncEachOfLimit","generator","limit","canceled","awaiting","running","idx","replenish","iterDone","iterateeCallback","catch","handleError","eachOfLimit","RangeError","asyncIterator","isAsyncIterable","nextElem","looping","elem","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf$1","map$1","applyEach$1","eachOfSeries$1","mapSeries$1","applyEachSeries","PROMISE_SYMBOL","promiseCallback","res","rej","auto","tasks","concurrency","numTasks","runningTasks","hasError","listeners","create","readyTasks","readyToCheck","uncheckedDependencies","enqueueTask","task","push","taskCallback","safeResults","forEach","rkey","processQueue","taskFn","runTask","shift","run","getDependents","taskName","Array","isArray","indexOf","dependencies","slice","remainingDependencies","dependencyName","join","taskListeners","addListener","currentTask","dependent","checkForDeadlocks","FN_ARGS","ARROW_FN_ARGS","FN_ARG_SPLIT","FN_ARG","STRIP_COMMENTS","autoInject","newTasks","params","fnIsAsync","hasNoDeps","newTask","src","toString","replace","match","split","map","arg","trim","parseParams","taskCb","newArgs","name","DLL","constructor","head","tail","removeLink","node","prev","empty","insertAfter","newNode","insertBefore","unshift","setInitial","toArray","cur","data","remove","testFn","curr","dll","queue","worker","payload","_worker","numRunning","workersList","events","drain","saturated","unsaturated","off","event","handler","filter","ev","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","q","started","_tasks","_createCB","l","splice","buffer","idle","_maybeDrain","eventMethod","handleAndRemove","on","isProcessing","paused","datum","pushAsync","kill","unshiftAsync","Math","min","pause","resume","defineProperties","writable","cargo","cargo$1","reduce$1","memo","x","seq","functions","_functions","newargs","nextargs","compose","reverse","mapLimit$1","concatLimit$1","val","mapResults","concat$1","concatSeries$1","constant","ignoredArgs","_createTester","check","getResult","testResult","testPassed","detect$1","bool","detectLimit$1","detectSeries$1","consoleFunc","resultArgs","console","dir","doWhilst$1","test","_fn","_test","truth","doUntil","_withoutIndex","each","eachLimit$2","eachSeries$1","ensureAsync","sync","innerArgs","every$1","everyLimit$1","everySeries$1","filterArray","truthValues","filterGeneric","sort","a","b","_filter","filter$1","filterLimit$1","filterSeries$1","forever$1","errback","groupByLimit$1","hasOwnProperty","prototype","groupBy","groupBySeries","log","mapValuesLimit$1","newObj","mapValues","mapValuesSeries","memoize","hasher","queues","memoized","unmemoized","parallel","parallel$1","parallelLimit","queue$1","items","Heap","heap","pushCount","Number","MIN_SAFE_INTEGER","percUp","p","smaller","parent","t","percDown","top","j","y","priority","priorityQueue","race$1","TypeError","reduceRight","array","reversed","reflect","reflectCallback","retVal","reflectAll","reject$2","rejectLimit$1","rejectSeries$1","constant$1","retry","opts","options","times","intervalFunc","arguments","parseTimes","_task","attempt","retryAttempt","errorFilter","acc","interval","retryable","series","some$1","Boolean","someLimit$1","someSeries$1","sortBy$1","criteria","comparator","left","right","timeout","milliseconds","info","timer","timedOut","clearTimeout","code","timesLimit","count","size","range","n","timesSeries","transform","accumulator","k","tryEach$1","unmemoize","whilst$1","rest","until","waterfall$1","taskIndex","nextTask","cargoQueue","concatLimit","concatSeries","detect","detectLimit","detectSeries","doWhilst","eachLimit","eachOf","eachOfSeries","eachSeries","every","everyLimit","everySeries","filterLimit","filterSeries","forever","groupByLimit","mapLimit","mapSeries","mapValuesLimit","race","reduce","rejectLimit","rejectSeries","some","someLimit","someSeries","sortBy","tryEach","waterfall","whilst","all","allLimit","allSeries","any","anyLimit","anySeries","find","findLimit","findSeries","flatMap","flatMapLimit","flatMapSeries","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","during","doDuring","default","defineProperty"],"sources":["async.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.async = {})));\n}(this, (function (exports) { 'use strict';\n\n    /**\n     * Creates a continuation function with some arguments already applied.\n     *\n     * Useful as a shorthand when combined with other control flow functions. Any\n     * arguments passed to the returned function are added to the arguments\n     * originally passed to apply.\n     *\n     * @name apply\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {Function} fn - The function you want to eventually apply all\n     * arguments to. Invokes with (arguments...).\n     * @param {...*} arguments... - Any number of arguments to automatically apply\n     * when the continuation is called.\n     * @returns {Function} the partially-applied function\n     * @example\n     *\n     * // using apply\n     * async.parallel([\n     *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n     *     async.apply(fs.writeFile, 'testfile2', 'test2')\n     * ]);\n     *\n     *\n     * // the same process without using apply\n     * async.parallel([\n     *     function(callback) {\n     *         fs.writeFile('testfile1', 'test1', callback);\n     *     },\n     *     function(callback) {\n     *         fs.writeFile('testfile2', 'test2', callback);\n     *     }\n     * ]);\n     *\n     * // It's possible to pass any number of additional arguments when calling the\n     * // continuation:\n     *\n     * node> var fn = async.apply(sys.puts, 'one');\n     * node> fn('two', 'three');\n     * one\n     * two\n     * three\n     */\n    function apply(fn, ...args) {\n        return (...callArgs) => fn(...args,...callArgs);\n    }\n\n    function initialParams (fn) {\n        return function (...args/*, callback*/) {\n            var callback = args.pop();\n            return fn.call(this, args, callback);\n        };\n    }\n\n    /* istanbul ignore file */\n\n    var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n    var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\n    function fallback(fn) {\n        setTimeout(fn, 0);\n    }\n\n    function wrap(defer) {\n        return (fn, ...args) => defer(() => fn(...args));\n    }\n\n    var _defer;\n\n    if (hasSetImmediate) {\n        _defer = setImmediate;\n    } else if (hasNextTick) {\n        _defer = process.nextTick;\n    } else {\n        _defer = fallback;\n    }\n\n    var setImmediate$1 = wrap(_defer);\n\n    /**\n     * Take a sync function and make it async, passing its return value to a\n     * callback. This is useful for plugging sync functions into a waterfall,\n     * series, or other async functions. Any arguments passed to the generated\n     * function will be passed to the wrapped function (except for the final\n     * callback argument). Errors thrown will be passed to the callback.\n     *\n     * If the function passed to `asyncify` returns a Promise, that promises's\n     * resolved/rejected state will be used to call the callback, rather than simply\n     * the synchronous return value.\n     *\n     * This also means you can asyncify ES2017 `async` functions.\n     *\n     * @name asyncify\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @alias wrapSync\n     * @category Util\n     * @param {Function} func - The synchronous function, or Promise-returning\n     * function to convert to an {@link AsyncFunction}.\n     * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n     * invoked with `(args..., callback)`.\n     * @example\n     *\n     * // passing a regular synchronous function\n     * async.waterfall([\n     *     async.apply(fs.readFile, filename, \"utf8\"),\n     *     async.asyncify(JSON.parse),\n     *     function (data, next) {\n     *         // data is the result of parsing the text.\n     *         // If there was a parsing error, it would have been caught.\n     *     }\n     * ], callback);\n     *\n     * // passing a function returning a promise\n     * async.waterfall([\n     *     async.apply(fs.readFile, filename, \"utf8\"),\n     *     async.asyncify(function (contents) {\n     *         return db.model.create(contents);\n     *     }),\n     *     function (model, next) {\n     *         // `model` is the instantiated model object.\n     *         // If there was an error, this function would be skipped.\n     *     }\n     * ], callback);\n     *\n     * // es2017 example, though `asyncify` is not needed if your JS environment\n     * // supports async functions out of the box\n     * var q = async.queue(async.asyncify(async function(file) {\n     *     var intermediateStep = await processFile(file);\n     *     return await somePromise(intermediateStep)\n     * }));\n     *\n     * q.push(files);\n     */\n    function asyncify(func) {\n        if (isAsync(func)) {\n            return function (...args/*, callback*/) {\n                const callback = args.pop();\n                const promise = func.apply(this, args);\n                return handlePromise(promise, callback)\n            }\n        }\n\n        return initialParams(function (args, callback) {\n            var result;\n            try {\n                result = func.apply(this, args);\n            } catch (e) {\n                return callback(e);\n            }\n            // if result is Promise object\n            if (result && typeof result.then === 'function') {\n                return handlePromise(result, callback)\n            } else {\n                callback(null, result);\n            }\n        });\n    }\n\n    function handlePromise(promise, callback) {\n        return promise.then(value => {\n            invokeCallback(callback, null, value);\n        }, err => {\n            invokeCallback(callback, err && err.message ? err : new Error(err));\n        });\n    }\n\n    function invokeCallback(callback, error, value) {\n        try {\n            callback(error, value);\n        } catch (err) {\n            setImmediate$1(e => { throw e }, err);\n        }\n    }\n\n    function isAsync(fn) {\n        return fn[Symbol.toStringTag] === 'AsyncFunction';\n    }\n\n    function isAsyncGenerator(fn) {\n        return fn[Symbol.toStringTag] === 'AsyncGenerator';\n    }\n\n    function isAsyncIterable(obj) {\n        return typeof obj[Symbol.asyncIterator] === 'function';\n    }\n\n    function wrapAsync(asyncFn) {\n        if (typeof asyncFn !== 'function') throw new Error('expected a function')\n        return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n    }\n\n    // conditionally promisify a function.\n    // only return a promise if a callback is omitted\n    function awaitify (asyncFn, arity = asyncFn.length) {\n        if (!arity) throw new Error('arity is undefined')\n        function awaitable (...args) {\n            if (typeof args[arity - 1] === 'function') {\n                return asyncFn.apply(this, args)\n            }\n\n            return new Promise((resolve, reject) => {\n                args[arity - 1] = (err, ...cbArgs) => {\n                    if (err) return reject(err)\n                    resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n                };\n                asyncFn.apply(this, args);\n            })\n        }\n\n        return awaitable\n    }\n\n    function applyEach (eachfn) {\n        return function applyEach(fns, ...callArgs) {\n            const go = awaitify(function (callback) {\n                var that = this;\n                return eachfn(fns, (fn, cb) => {\n                    wrapAsync(fn).apply(that, callArgs.concat(cb));\n                }, callback);\n            });\n            return go;\n        };\n    }\n\n    function _asyncMap(eachfn, arr, iteratee, callback) {\n        arr = arr || [];\n        var results = [];\n        var counter = 0;\n        var _iteratee = wrapAsync(iteratee);\n\n        return eachfn(arr, (value, _, iterCb) => {\n            var index = counter++;\n            _iteratee(value, (err, v) => {\n                results[index] = v;\n                iterCb(err);\n            });\n        }, err => {\n            callback(err, results);\n        });\n    }\n\n    function isArrayLike(value) {\n        return value &&\n            typeof value.length === 'number' &&\n            value.length >= 0 &&\n            value.length % 1 === 0;\n    }\n\n    // A temporary value used to identify if the loop should be broken.\n    // See #1064, #1293\n    const breakLoop = {};\n\n    function once(fn) {\n        function wrapper (...args) {\n            if (fn === null) return;\n            var callFn = fn;\n            fn = null;\n            callFn.apply(this, args);\n        }\n        Object.assign(wrapper, fn);\n        return wrapper\n    }\n\n    function getIterator (coll) {\n        return coll[Symbol.iterator] && coll[Symbol.iterator]();\n    }\n\n    function createArrayIterator(coll) {\n        var i = -1;\n        var len = coll.length;\n        return function next() {\n            return ++i < len ? {value: coll[i], key: i} : null;\n        }\n    }\n\n    function createES2015Iterator(iterator) {\n        var i = -1;\n        return function next() {\n            var item = iterator.next();\n            if (item.done)\n                return null;\n            i++;\n            return {value: item.value, key: i};\n        }\n    }\n\n    function createObjectIterator(obj) {\n        var okeys = obj ? Object.keys(obj) : [];\n        var i = -1;\n        var len = okeys.length;\n        return function next() {\n            var key = okeys[++i];\n            return i < len ? {value: obj[key], key} : null;\n        };\n    }\n\n    function createIterator(coll) {\n        if (isArrayLike(coll)) {\n            return createArrayIterator(coll);\n        }\n\n        var iterator = getIterator(coll);\n        return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n    }\n\n    function onlyOnce(fn) {\n        return function (...args) {\n            if (fn === null) throw new Error(\"Callback was already called.\");\n            var callFn = fn;\n            fn = null;\n            callFn.apply(this, args);\n        };\n    }\n\n    // for async generators\n    function asyncEachOfLimit(generator, limit, iteratee, callback) {\n        let done = false;\n        let canceled = false;\n        let awaiting = false;\n        let running = 0;\n        let idx = 0;\n\n        function replenish() {\n            //console.log('replenish')\n            if (running >= limit || awaiting || done) return\n            //console.log('replenish awaiting')\n            awaiting = true;\n            generator.next().then(({value, done: iterDone}) => {\n                //console.log('got value', value)\n                if (canceled || done) return\n                awaiting = false;\n                if (iterDone) {\n                    done = true;\n                    if (running <= 0) {\n                        //console.log('done nextCb')\n                        callback(null);\n                    }\n                    return;\n                }\n                running++;\n                iteratee(value, idx, iterateeCallback);\n                idx++;\n                replenish();\n            }).catch(handleError);\n        }\n\n        function iterateeCallback(err, result) {\n            //console.log('iterateeCallback')\n            running -= 1;\n            if (canceled) return\n            if (err) return handleError(err)\n\n            if (err === false) {\n                done = true;\n                canceled = true;\n                return\n            }\n\n            if (result === breakLoop || (done && running <= 0)) {\n                done = true;\n                //console.log('done iterCb')\n                return callback(null);\n            }\n            replenish();\n        }\n\n        function handleError(err) {\n            if (canceled) return\n            awaiting = false;\n            done = true;\n            callback(err);\n        }\n\n        replenish();\n    }\n\n    var eachOfLimit = (limit) => {\n        return (obj, iteratee, callback) => {\n            callback = once(callback);\n            if (limit <= 0) {\n                throw new RangeError('concurrency limit cannot be less than 1')\n            }\n            if (!obj) {\n                return callback(null);\n            }\n            if (isAsyncGenerator(obj)) {\n                return asyncEachOfLimit(obj, limit, iteratee, callback)\n            }\n            if (isAsyncIterable(obj)) {\n                return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n            }\n            var nextElem = createIterator(obj);\n            var done = false;\n            var canceled = false;\n            var running = 0;\n            var looping = false;\n\n            function iterateeCallback(err, value) {\n                if (canceled) return\n                running -= 1;\n                if (err) {\n                    done = true;\n                    callback(err);\n                }\n                else if (err === false) {\n                    done = true;\n                    canceled = true;\n                }\n                else if (value === breakLoop || (done && running <= 0)) {\n                    done = true;\n                    return callback(null);\n                }\n                else if (!looping) {\n                    replenish();\n                }\n            }\n\n            function replenish () {\n                looping = true;\n                while (running < limit && !done) {\n                    var elem = nextElem();\n                    if (elem === null) {\n                        done = true;\n                        if (running <= 0) {\n                            callback(null);\n                        }\n                        return;\n                    }\n                    running += 1;\n                    iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n                }\n                looping = false;\n            }\n\n            replenish();\n        };\n    };\n\n    /**\n     * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name eachOfLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.eachOf]{@link module:Collections.eachOf}\n     * @alias forEachOfLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each\n     * item in `coll`. The `key` is the item's key, or index in the case of an\n     * array.\n     * Invoked with (item, key, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachOfLimit$1(coll, limit, iteratee, callback) {\n        return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n    }\n\n    var eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n    // eachOf implementation optimized for array-likes\n    function eachOfArrayLike(coll, iteratee, callback) {\n        callback = once(callback);\n        var index = 0,\n            completed = 0,\n            {length} = coll,\n            canceled = false;\n        if (length === 0) {\n            callback(null);\n        }\n\n        function iteratorCallback(err, value) {\n            if (err === false) {\n                canceled = true;\n            }\n            if (canceled === true) return\n            if (err) {\n                callback(err);\n            } else if ((++completed === length) || value === breakLoop) {\n                callback(null);\n            }\n        }\n\n        for (; index < length; index++) {\n            iteratee(coll[index], index, onlyOnce(iteratorCallback));\n        }\n    }\n\n    // a generic version of eachOf which can handle array, object, and iterator cases.\n    function eachOfGeneric (coll, iteratee, callback) {\n        return eachOfLimit$2(coll, Infinity, iteratee, callback);\n    }\n\n    /**\n     * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n     * to the iteratee.\n     *\n     * @name eachOf\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias forEachOf\n     * @category Collection\n     * @see [async.each]{@link module:Collections.each}\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each\n     * item in `coll`.\n     * The `key` is the item's key, or index in the case of an array.\n     * Invoked with (item, key, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n     * var configs = {};\n     *\n     * async.forEachOf(obj, function (value, key, callback) {\n     *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n     *         if (err) return callback(err);\n     *         try {\n     *             configs[key] = JSON.parse(data);\n     *         } catch (e) {\n     *             return callback(e);\n     *         }\n     *         callback();\n     *     });\n     * }, function (err) {\n     *     if (err) console.error(err.message);\n     *     // configs is now a map of JSON data\n     *     doSomethingWith(configs);\n     * });\n     */\n    function eachOf(coll, iteratee, callback) {\n        var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n        return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n    }\n\n    var eachOf$1 = awaitify(eachOf, 3);\n\n    /**\n     * Produces a new collection of values by mapping each value in `coll` through\n     * the `iteratee` function. The `iteratee` is called with an item from `coll`\n     * and a callback for when it has finished processing. Each of these callback\n     * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n     * `iteratee` passes an error to its callback, the main `callback` (for the\n     * `map` function) is immediately called with the error.\n     *\n     * Note, that since this function applies the `iteratee` to each item in\n     * parallel, there is no guarantee that the `iteratee` functions will complete\n     * in order. However, the results array will be in the same order as the\n     * original `coll`.\n     *\n     * If `map` is passed an Object, the results will be an Array.  The results\n     * will roughly be in the order of the original Objects' keys (but this can\n     * vary across JavaScript engines).\n     *\n     * @name map\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with the transformed item.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Results is an Array of the\n     * transformed items from the `coll`. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n     *     // results is now an array of stats for each file\n     * });\n     */\n    function map (coll, iteratee, callback) {\n        return _asyncMap(eachOf$1, coll, iteratee, callback)\n    }\n    var map$1 = awaitify(map, 3);\n\n    /**\n     * Applies the provided arguments to each function in the array, calling\n     * `callback` after all functions have completed. If you only provide the first\n     * argument, `fns`, then it will return a function which lets you pass in the\n     * arguments as if it were a single function call. If more arguments are\n     * provided, `callback` is required while `args` is still optional. The results\n     * for each of the applied async functions are passed to the final callback\n     * as an array.\n     *\n     * @name applyEach\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n     * to all call with the same arguments\n     * @param {...*} [args] - any number of separate arguments to pass to the\n     * function.\n     * @param {Function} [callback] - the final argument should be the callback,\n     * called when all functions have completed processing.\n     * @returns {AsyncFunction} - Returns a function that takes no args other than\n     * an optional callback, that is the result of applying the `args` to each\n     * of the functions.\n     * @example\n     *\n     * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n     *\n     * appliedFn((err, results) => {\n     *     // results[0] is the results for `enableSearch`\n     *     // results[1] is the results for `updateSchema`\n     * });\n     *\n     * // partial application example:\n     * async.each(\n     *     buckets,\n     *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n     *     callback\n     * );\n     */\n    var applyEach$1 = applyEach(map$1);\n\n    /**\n     * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n     *\n     * @name eachOfSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.eachOf]{@link module:Collections.eachOf}\n     * @alias forEachOfSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * Invoked with (item, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachOfSeries(coll, iteratee, callback) {\n        return eachOfLimit$2(coll, 1, iteratee, callback)\n    }\n    var eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n    /**\n     * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n     *\n     * @name mapSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.map]{@link module:Collections.map}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with the transformed item.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Results is an array of the\n     * transformed items from the `coll`. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapSeries (coll, iteratee, callback) {\n        return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var mapSeries$1 = awaitify(mapSeries, 3);\n\n    /**\n     * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n     *\n     * @name applyEachSeries\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n     * call with the same arguments\n     * @param {...*} [args] - any number of separate arguments to pass to the\n     * function.\n     * @param {Function} [callback] - the final argument should be the callback,\n     * called when all functions have completed processing.\n     * @returns {AsyncFunction} - A function, that when called, is the result of\n     * appling the `args` to the list of functions.  It takes no args, other than\n     * a callback.\n     */\n    var applyEachSeries = applyEach(mapSeries$1);\n\n    const PROMISE_SYMBOL = Symbol('promiseCallback');\n\n    function promiseCallback () {\n        let resolve, reject;\n        function callback (err, ...args) {\n            if (err) return reject(err)\n            resolve(args.length > 1 ? args : args[0]);\n        }\n\n        callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n            resolve = res,\n            reject = rej;\n        });\n\n        return callback\n    }\n\n    /**\n     * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n     * their requirements. Each function can optionally depend on other functions\n     * being completed first, and each function is run as soon as its requirements\n     * are satisfied.\n     *\n     * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n     * will stop. Further tasks will not execute (so any other functions depending\n     * on it will not run), and the main `callback` is immediately called with the\n     * error.\n     *\n     * {@link AsyncFunction}s also receive an object containing the results of functions which\n     * have completed so far as the first argument, if they have dependencies. If a\n     * task function has no dependencies, it will only be passed a callback.\n     *\n     * @name auto\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Object} tasks - An object. Each of its properties is either a\n     * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n     * in the array. The object's key of a property serves as the name of the task\n     * defined by that property, i.e. can be used when specifying requirements for\n     * other tasks. The function receives one or two arguments:\n     * * a `results` object, containing the results of the previously executed\n     *   functions, only passed if the task has any dependencies,\n     * * a `callback(err, result)` function, which must be called when finished,\n     *   passing an `error` (which can be `null`) and the result of the function's\n     *   execution.\n     * @param {number} [concurrency=Infinity] - An optional `integer` for\n     * determining the maximum number of tasks that can be run in parallel. By\n     * default, as many as possible.\n     * @param {Function} [callback] - An optional callback which is called when all\n     * the tasks have been completed. It receives the `err` argument if any `tasks`\n     * pass an error to their callback. Results are always returned; however, if an\n     * error occurs, no further `tasks` will be performed, and the results object\n     * will only contain partial results. Invoked with (err, results).\n     * @returns {Promise} a promise, if a callback is not passed\n     * @example\n     *\n     * async.auto({\n     *     // this function will just be passed a callback\n     *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n     *     showData: ['readData', function(results, cb) {\n     *         // results.readData is the file's contents\n     *         // ...\n     *     }]\n     * }, callback);\n     *\n     * async.auto({\n     *     get_data: function(callback) {\n     *         console.log('in get_data');\n     *         // async code to get some data\n     *         callback(null, 'data', 'converted to array');\n     *     },\n     *     make_folder: function(callback) {\n     *         console.log('in make_folder');\n     *         // async code to create a directory to store a file in\n     *         // this is run at the same time as getting the data\n     *         callback(null, 'folder');\n     *     },\n     *     write_file: ['get_data', 'make_folder', function(results, callback) {\n     *         console.log('in write_file', JSON.stringify(results));\n     *         // once there is some data and the directory exists,\n     *         // write the data to a file in the directory\n     *         callback(null, 'filename');\n     *     }],\n     *     email_link: ['write_file', function(results, callback) {\n     *         console.log('in email_link', JSON.stringify(results));\n     *         // once the file is written let's email a link to it...\n     *         // results.write_file contains the filename returned by write_file.\n     *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n     *     }]\n     * }, function(err, results) {\n     *     console.log('err = ', err);\n     *     console.log('results = ', results);\n     * });\n     */\n    function auto(tasks, concurrency, callback) {\n        if (typeof concurrency !== 'number') {\n            // concurrency is optional, shift the args.\n            callback = concurrency;\n            concurrency = null;\n        }\n        callback = once(callback || promiseCallback());\n        var numTasks = Object.keys(tasks).length;\n        if (!numTasks) {\n            return callback(null);\n        }\n        if (!concurrency) {\n            concurrency = numTasks;\n        }\n\n        var results = {};\n        var runningTasks = 0;\n        var canceled = false;\n        var hasError = false;\n\n        var listeners = Object.create(null);\n\n        var readyTasks = [];\n\n        // for cycle detection:\n        var readyToCheck = []; // tasks that have been identified as reachable\n        // without the possibility of returning to an ancestor task\n        var uncheckedDependencies = {};\n\n        Object.keys(tasks).forEach(key => {\n            var task = tasks[key];\n            if (!Array.isArray(task)) {\n                // no dependencies\n                enqueueTask(key, [task]);\n                readyToCheck.push(key);\n                return;\n            }\n\n            var dependencies = task.slice(0, task.length - 1);\n            var remainingDependencies = dependencies.length;\n            if (remainingDependencies === 0) {\n                enqueueTask(key, task);\n                readyToCheck.push(key);\n                return;\n            }\n            uncheckedDependencies[key] = remainingDependencies;\n\n            dependencies.forEach(dependencyName => {\n                if (!tasks[dependencyName]) {\n                    throw new Error('async.auto task `' + key +\n                        '` has a non-existent dependency `' +\n                        dependencyName + '` in ' +\n                        dependencies.join(', '));\n                }\n                addListener(dependencyName, () => {\n                    remainingDependencies--;\n                    if (remainingDependencies === 0) {\n                        enqueueTask(key, task);\n                    }\n                });\n            });\n        });\n\n        checkForDeadlocks();\n        processQueue();\n\n        function enqueueTask(key, task) {\n            readyTasks.push(() => runTask(key, task));\n        }\n\n        function processQueue() {\n            if (canceled) return\n            if (readyTasks.length === 0 && runningTasks === 0) {\n                return callback(null, results);\n            }\n            while(readyTasks.length && runningTasks < concurrency) {\n                var run = readyTasks.shift();\n                run();\n            }\n\n        }\n\n        function addListener(taskName, fn) {\n            var taskListeners = listeners[taskName];\n            if (!taskListeners) {\n                taskListeners = listeners[taskName] = [];\n            }\n\n            taskListeners.push(fn);\n        }\n\n        function taskComplete(taskName) {\n            var taskListeners = listeners[taskName] || [];\n            taskListeners.forEach(fn => fn());\n            processQueue();\n        }\n\n\n        function runTask(key, task) {\n            if (hasError) return;\n\n            var taskCallback = onlyOnce((err, ...result) => {\n                runningTasks--;\n                if (err === false) {\n                    canceled = true;\n                    return\n                }\n                if (result.length < 2) {\n                    [result] = result;\n                }\n                if (err) {\n                    var safeResults = {};\n                    Object.keys(results).forEach(rkey => {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[key] = result;\n                    hasError = true;\n                    listeners = Object.create(null);\n                    if (canceled) return\n                    callback(err, safeResults);\n                } else {\n                    results[key] = result;\n                    taskComplete(key);\n                }\n            });\n\n            runningTasks++;\n            var taskFn = wrapAsync(task[task.length - 1]);\n            if (task.length > 1) {\n                taskFn(results, taskCallback);\n            } else {\n                taskFn(taskCallback);\n            }\n        }\n\n        function checkForDeadlocks() {\n            // Kahn's algorithm\n            // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n            // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n            var currentTask;\n            var counter = 0;\n            while (readyToCheck.length) {\n                currentTask = readyToCheck.pop();\n                counter++;\n                getDependents(currentTask).forEach(dependent => {\n                    if (--uncheckedDependencies[dependent] === 0) {\n                        readyToCheck.push(dependent);\n                    }\n                });\n            }\n\n            if (counter !== numTasks) {\n                throw new Error(\n                    'async.auto cannot execute tasks due to a recursive dependency'\n                );\n            }\n        }\n\n        function getDependents(taskName) {\n            var result = [];\n            Object.keys(tasks).forEach(key => {\n                const task = tasks[key];\n                if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                    result.push(key);\n                }\n            });\n            return result;\n        }\n\n        return callback[PROMISE_SYMBOL]\n    }\n\n    var FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\n    var ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\n    var FN_ARG_SPLIT = /,/;\n    var FN_ARG = /(=.+)?(\\s*)$/;\n    var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n    function parseParams(func) {\n        const src = func.toString().replace(STRIP_COMMENTS, '');\n        let match = src.match(FN_ARGS);\n        if (!match) {\n            match = src.match(ARROW_FN_ARGS);\n        }\n        if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n        let [, args] = match;\n        return args\n            .replace(/\\s/g, '')\n            .split(FN_ARG_SPLIT)\n            .map((arg) => arg.replace(FN_ARG, '').trim());\n    }\n\n    /**\n     * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n     * tasks are specified as parameters to the function, after the usual callback\n     * parameter, with the parameter names matching the names of the tasks it\n     * depends on. This can provide even more readable task graphs which can be\n     * easier to maintain.\n     *\n     * If a final callback is specified, the task results are similarly injected,\n     * specified as named parameters after the initial error parameter.\n     *\n     * The autoInject function is purely syntactic sugar and its semantics are\n     * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n     *\n     * @name autoInject\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.auto]{@link module:ControlFlow.auto}\n     * @category Control Flow\n     * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n     * the form 'func([dependencies...], callback). The object's key of a property\n     * serves as the name of the task defined by that property, i.e. can be used\n     * when specifying requirements for other tasks.\n     * * The `callback` parameter is a `callback(err, result)` which must be called\n     *   when finished, passing an `error` (which can be `null`) and the result of\n     *   the function's execution. The remaining parameters name other tasks on\n     *   which the task is dependent, and the results from those tasks are the\n     *   arguments of those parameters.\n     * @param {Function} [callback] - An optional callback which is called when all\n     * the tasks have been completed. It receives the `err` argument if any `tasks`\n     * pass an error to their callback, and a `results` object with any completed\n     * task results, similar to `auto`.\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * //  The example from `auto` can be rewritten as follows:\n     * async.autoInject({\n     *     get_data: function(callback) {\n     *         // async code to get some data\n     *         callback(null, 'data', 'converted to array');\n     *     },\n     *     make_folder: function(callback) {\n     *         // async code to create a directory to store a file in\n     *         // this is run at the same time as getting the data\n     *         callback(null, 'folder');\n     *     },\n     *     write_file: function(get_data, make_folder, callback) {\n     *         // once there is some data and the directory exists,\n     *         // write the data to a file in the directory\n     *         callback(null, 'filename');\n     *     },\n     *     email_link: function(write_file, callback) {\n     *         // once the file is written let's email a link to it...\n     *         // write_file contains the filename returned by write_file.\n     *         callback(null, {'file':write_file, 'email':'user@example.com'});\n     *     }\n     * }, function(err, results) {\n     *     console.log('err = ', err);\n     *     console.log('email_link = ', results.email_link);\n     * });\n     *\n     * // If you are using a JS minifier that mangles parameter names, `autoInject`\n     * // will not work with plain functions, since the parameter names will be\n     * // collapsed to a single letter identifier.  To work around this, you can\n     * // explicitly specify the names of the parameters your task function needs\n     * // in an array, similar to Angular.js dependency injection.\n     *\n     * // This still has an advantage over plain `auto`, since the results a task\n     * // depends on are still spread into arguments.\n     * async.autoInject({\n     *     //...\n     *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n     *         callback(null, 'filename');\n     *     }],\n     *     email_link: ['write_file', function(write_file, callback) {\n     *         callback(null, {'file':write_file, 'email':'user@example.com'});\n     *     }]\n     *     //...\n     * }, function(err, results) {\n     *     console.log('err = ', err);\n     *     console.log('email_link = ', results.email_link);\n     * });\n     */\n    function autoInject(tasks, callback) {\n        var newTasks = {};\n\n        Object.keys(tasks).forEach(key => {\n            var taskFn = tasks[key];\n            var params;\n            var fnIsAsync = isAsync(taskFn);\n            var hasNoDeps =\n                (!fnIsAsync && taskFn.length === 1) ||\n                (fnIsAsync && taskFn.length === 0);\n\n            if (Array.isArray(taskFn)) {\n                params = [...taskFn];\n                taskFn = params.pop();\n\n                newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n            } else if (hasNoDeps) {\n                // no dependencies, use the function as-is\n                newTasks[key] = taskFn;\n            } else {\n                params = parseParams(taskFn);\n                if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                    throw new Error(\"autoInject task functions require explicit parameters.\");\n                }\n\n                // remove callback param\n                if (!fnIsAsync) params.pop();\n\n                newTasks[key] = params.concat(newTask);\n            }\n\n            function newTask(results, taskCb) {\n                var newArgs = params.map(name => results[name]);\n                newArgs.push(taskCb);\n                wrapAsync(taskFn)(...newArgs);\n            }\n        });\n\n        return auto(newTasks, callback);\n    }\n\n    // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n    // used for queues. This implementation assumes that the node provided by the user can be modified\n    // to adjust the next and last properties. We implement only the minimal functionality\n    // for queue support.\n    class DLL {\n        constructor() {\n            this.head = this.tail = null;\n            this.length = 0;\n        }\n\n        removeLink(node) {\n            if (node.prev) node.prev.next = node.next;\n            else this.head = node.next;\n            if (node.next) node.next.prev = node.prev;\n            else this.tail = node.prev;\n\n            node.prev = node.next = null;\n            this.length -= 1;\n            return node;\n        }\n\n        empty () {\n            while(this.head) this.shift();\n            return this;\n        }\n\n        insertAfter(node, newNode) {\n            newNode.prev = node;\n            newNode.next = node.next;\n            if (node.next) node.next.prev = newNode;\n            else this.tail = newNode;\n            node.next = newNode;\n            this.length += 1;\n        }\n\n        insertBefore(node, newNode) {\n            newNode.prev = node.prev;\n            newNode.next = node;\n            if (node.prev) node.prev.next = newNode;\n            else this.head = newNode;\n            node.prev = newNode;\n            this.length += 1;\n        }\n\n        unshift(node) {\n            if (this.head) this.insertBefore(this.head, node);\n            else setInitial(this, node);\n        }\n\n        push(node) {\n            if (this.tail) this.insertAfter(this.tail, node);\n            else setInitial(this, node);\n        }\n\n        shift() {\n            return this.head && this.removeLink(this.head);\n        }\n\n        pop() {\n            return this.tail && this.removeLink(this.tail);\n        }\n\n        toArray() {\n            return [...this]\n        }\n\n        *[Symbol.iterator] () {\n            var cur = this.head;\n            while (cur) {\n                yield cur.data;\n                cur = cur.next;\n            }\n        }\n\n        remove (testFn) {\n            var curr = this.head;\n            while(curr) {\n                var {next} = curr;\n                if (testFn(curr)) {\n                    this.removeLink(curr);\n                }\n                curr = next;\n            }\n            return this;\n        }\n    }\n\n    function setInitial(dll, node) {\n        dll.length = 1;\n        dll.head = dll.tail = node;\n    }\n\n    function queue(worker, concurrency, payload) {\n        if (concurrency == null) {\n            concurrency = 1;\n        }\n        else if(concurrency === 0) {\n            throw new RangeError('Concurrency must not be zero');\n        }\n\n        var _worker = wrapAsync(worker);\n        var numRunning = 0;\n        var workersList = [];\n        const events = {\n            error: [],\n            drain: [],\n            saturated: [],\n            unsaturated: [],\n            empty: []\n        };\n\n        function on (event, handler) {\n            events[event].push(handler);\n        }\n\n        function once (event, handler) {\n            const handleAndRemove = (...args) => {\n                off(event, handleAndRemove);\n                handler(...args);\n            };\n            events[event].push(handleAndRemove);\n        }\n\n        function off (event, handler) {\n            if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n            if (!handler) return events[event] = []\n            events[event] = events[event].filter(ev => ev !== handler);\n        }\n\n        function trigger (event, ...args) {\n            events[event].forEach(handler => handler(...args));\n        }\n\n        var processingScheduled = false;\n        function _insert(data, insertAtFront, rejectOnError, callback) {\n            if (callback != null && typeof callback !== 'function') {\n                throw new Error('task callback must be a function');\n            }\n            q.started = true;\n\n            var res, rej;\n            function promiseCallback (err, ...args) {\n                // we don't care about the error, let the global error handler\n                // deal with it\n                if (err) return rejectOnError ? rej(err) : res()\n                if (args.length <= 1) return res(args[0])\n                res(args);\n            }\n\n            var item = {\n                data,\n                callback: rejectOnError ?\n                    promiseCallback :\n                    (callback || promiseCallback)\n            };\n\n            if (insertAtFront) {\n                q._tasks.unshift(item);\n            } else {\n                q._tasks.push(item);\n            }\n\n            if (!processingScheduled) {\n                processingScheduled = true;\n                setImmediate$1(() => {\n                    processingScheduled = false;\n                    q.process();\n                });\n            }\n\n            if (rejectOnError || !callback) {\n                return new Promise((resolve, reject) => {\n                    res = resolve;\n                    rej = reject;\n                })\n            }\n        }\n\n        function _createCB(tasks) {\n            return function (err, ...args) {\n                numRunning -= 1;\n\n                for (var i = 0, l = tasks.length; i < l; i++) {\n                    var task = tasks[i];\n\n                    var index = workersList.indexOf(task);\n                    if (index === 0) {\n                        workersList.shift();\n                    } else if (index > 0) {\n                        workersList.splice(index, 1);\n                    }\n\n                    task.callback(err, ...args);\n\n                    if (err != null) {\n                        trigger('error', err, task.data);\n                    }\n                }\n\n                if (numRunning <= (q.concurrency - q.buffer) ) {\n                    trigger('unsaturated');\n                }\n\n                if (q.idle()) {\n                    trigger('drain');\n                }\n                q.process();\n            };\n        }\n\n        function _maybeDrain(data) {\n            if (data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                setImmediate$1(() => trigger('drain'));\n                return true\n            }\n            return false\n        }\n\n        const eventMethod = (name) => (handler) => {\n            if (!handler) {\n                return new Promise((resolve, reject) => {\n                    once(name, (err, data) => {\n                        if (err) return reject(err)\n                        resolve(data);\n                    });\n                })\n            }\n            off(name);\n            on(name, handler);\n\n        };\n\n        var isProcessing = false;\n        var q = {\n            _tasks: new DLL(),\n            *[Symbol.iterator] () {\n                yield* q._tasks[Symbol.iterator]();\n            },\n            concurrency,\n            payload,\n            buffer: concurrency / 4,\n            started: false,\n            paused: false,\n            push (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, false, false, callback))\n                }\n                return _insert(data, false, false, callback);\n            },\n            pushAsync (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, false, true, callback))\n                }\n                return _insert(data, false, true, callback);\n            },\n            kill () {\n                off();\n                q._tasks.empty();\n            },\n            unshift (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, true, false, callback))\n                }\n                return _insert(data, true, false, callback);\n            },\n            unshiftAsync (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, true, true, callback))\n                }\n                return _insert(data, true, true, callback);\n            },\n            remove (testFn) {\n                q._tasks.remove(testFn);\n            },\n            process () {\n                // Avoid trying to start too many processing operations. This can occur\n                // when callbacks resolve synchronously (#1267).\n                if (isProcessing) {\n                    return;\n                }\n                isProcessing = true;\n                while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                    var tasks = [], data = [];\n                    var l = q._tasks.length;\n                    if (q.payload) l = Math.min(l, q.payload);\n                    for (var i = 0; i < l; i++) {\n                        var node = q._tasks.shift();\n                        tasks.push(node);\n                        workersList.push(node);\n                        data.push(node.data);\n                    }\n\n                    numRunning += 1;\n\n                    if (q._tasks.length === 0) {\n                        trigger('empty');\n                    }\n\n                    if (numRunning === q.concurrency) {\n                        trigger('saturated');\n                    }\n\n                    var cb = onlyOnce(_createCB(tasks));\n                    _worker(data, cb);\n                }\n                isProcessing = false;\n            },\n            length () {\n                return q._tasks.length;\n            },\n            running () {\n                return numRunning;\n            },\n            workersList () {\n                return workersList;\n            },\n            idle() {\n                return q._tasks.length + numRunning === 0;\n            },\n            pause () {\n                q.paused = true;\n            },\n            resume () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                setImmediate$1(q.process);\n            }\n        };\n        // define these as fixed properties, so people get useful errors when updating\n        Object.defineProperties(q, {\n            saturated: {\n                writable: false,\n                value: eventMethod('saturated')\n            },\n            unsaturated: {\n                writable: false,\n                value: eventMethod('unsaturated')\n            },\n            empty: {\n                writable: false,\n                value: eventMethod('empty')\n            },\n            drain: {\n                writable: false,\n                value: eventMethod('drain')\n            },\n            error: {\n                writable: false,\n                value: eventMethod('error')\n            },\n        });\n        return q;\n    }\n\n    /**\n     * Creates a `cargo` object with the specified payload. Tasks added to the\n     * cargo will be processed altogether (up to the `payload` limit). If the\n     * `worker` is in progress, the task is queued until it becomes available. Once\n     * the `worker` has completed some tasks, each callback of those tasks is\n     * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n     * for how `cargo` and `queue` work.\n     *\n     * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n     * at a time, cargo passes an array of tasks to a single worker, repeating\n     * when the worker is finished.\n     *\n     * @name cargo\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.queue]{@link module:ControlFlow.queue}\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An asynchronous function for processing an array\n     * of queued tasks. Invoked with `(tasks, callback)`.\n     * @param {number} [payload=Infinity] - An optional `integer` for determining\n     * how many tasks should be processed per round; if omitted, the default is\n     * unlimited.\n     * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n     * attached as certain properties to listen for specific events during the\n     * lifecycle of the cargo and inner queue.\n     * @example\n     *\n     * // create a cargo object with payload 2\n     * var cargo = async.cargo(function(tasks, callback) {\n     *     for (var i=0; i<tasks.length; i++) {\n     *         console.log('hello ' + tasks[i].name);\n     *     }\n     *     callback();\n     * }, 2);\n     *\n     * // add some items\n     * cargo.push({name: 'foo'}, function(err) {\n     *     console.log('finished processing foo');\n     * });\n     * cargo.push({name: 'bar'}, function(err) {\n     *     console.log('finished processing bar');\n     * });\n     * await cargo.push({name: 'baz'});\n     * console.log('finished processing baz');\n     */\n    function cargo(worker, payload) {\n        return queue(worker, 1, payload);\n    }\n\n    /**\n     * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n     * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n     * If the all `workers` are in progress, the task is queued until one becomes available. Once\n     * a `worker` has completed some tasks, each callback of those tasks is\n     * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n     * for how `cargo` and `queue` work.\n     *\n     * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n     * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n     * the cargoQueue passes an array of tasks to multiple parallel workers.\n     *\n     * @name cargoQueue\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.queue]{@link module:ControlFlow.queue}\n     * @see [async.cargo]{@link module:ControlFLow.cargo}\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An asynchronous function for processing an array\n     * of queued tasks. Invoked with `(tasks, callback)`.\n     * @param {number} [concurrency=1] - An `integer` for determining how many\n     * `worker` functions should be run in parallel.  If omitted, the concurrency\n     * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n     * @param {number} [payload=Infinity] - An optional `integer` for determining\n     * how many tasks should be processed per round; if omitted, the default is\n     * unlimited.\n     * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n     * attached as certain properties to listen for specific events during the\n     * lifecycle of the cargoQueue and inner queue.\n     * @example\n     *\n     * // create a cargoQueue object with payload 2 and concurrency 2\n     * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n     *     for (var i=0; i<tasks.length; i++) {\n     *         console.log('hello ' + tasks[i].name);\n     *     }\n     *     callback();\n     * }, 2, 2);\n     *\n     * // add some items\n     * cargoQueue.push({name: 'foo'}, function(err) {\n     *     console.log('finished processing foo');\n     * });\n     * cargoQueue.push({name: 'bar'}, function(err) {\n     *     console.log('finished processing bar');\n     * });\n     * cargoQueue.push({name: 'baz'}, function(err) {\n     *     console.log('finished processing baz');\n     * });\n     * cargoQueue.push({name: 'boo'}, function(err) {\n     *     console.log('finished processing boo');\n     * });\n     */\n    function cargo$1(worker, concurrency, payload) {\n        return queue(worker, concurrency, payload);\n    }\n\n    /**\n     * Reduces `coll` into a single value using an async `iteratee` to return each\n     * successive step. `memo` is the initial state of the reduction. This function\n     * only operates in series.\n     *\n     * For performance reasons, it may make sense to split a call to this function\n     * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n     * results. This function is for situations where each step in the reduction\n     * needs to be async; if you can get the data before reducing it, then it's\n     * probably a good idea to do so.\n     *\n     * @name reduce\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias inject\n     * @alias foldl\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {*} memo - The initial state of the reduction.\n     * @param {AsyncFunction} iteratee - A function applied to each item in the\n     * array to produce the next step in the reduction.\n     * The `iteratee` should complete with the next state of the reduction.\n     * If the iteratee complete with an error, the reduction is stopped and the\n     * main `callback` is immediately called with the error.\n     * Invoked with (memo, item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result is the reduced value. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * async.reduce([1,2,3], 0, function(memo, item, callback) {\n     *     // pointless async:\n     *     process.nextTick(function() {\n     *         callback(null, memo + item)\n     *     });\n     * }, function(err, result) {\n     *     // result is now equal to the last value of memo, which is 6\n     * });\n     */\n    function reduce(coll, memo, iteratee, callback) {\n        callback = once(callback);\n        var _iteratee = wrapAsync(iteratee);\n        return eachOfSeries$1(coll, (x, i, iterCb) => {\n            _iteratee(memo, x, (err, v) => {\n                memo = v;\n                iterCb(err);\n            });\n        }, err => callback(err, memo));\n    }\n    var reduce$1 = awaitify(reduce, 4);\n\n    /**\n     * Version of the compose function that is more natural to read. Each function\n     * consumes the return value of the previous function. It is the equivalent of\n     * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n     *\n     * Each function is executed with the `this` binding of the composed function.\n     *\n     * @name seq\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.compose]{@link module:ControlFlow.compose}\n     * @category Control Flow\n     * @param {...AsyncFunction} functions - the asynchronous functions to compose\n     * @returns {Function} a function that composes the `functions` in order\n     * @example\n     *\n     * // Requires lodash (or underscore), express3 and dresende's orm2.\n     * // Part of an app, that fetches cats of the logged user.\n     * // This example uses `seq` function to avoid overnesting and error\n     * // handling clutter.\n     * app.get('/cats', function(request, response) {\n     *     var User = request.models.User;\n     *     async.seq(\n     *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n     *         function(user, fn) {\n     *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n     *         }\n     *     )(req.session.user_id, function (err, cats) {\n     *         if (err) {\n     *             console.error(err);\n     *             response.json({ status: 'error', message: err.message });\n     *         } else {\n     *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n     *         }\n     *     });\n     * });\n     */\n    function seq(...functions) {\n        var _functions = functions.map(wrapAsync);\n        return function (...args) {\n            var that = this;\n\n            var cb = args[args.length - 1];\n            if (typeof cb == 'function') {\n                args.pop();\n            } else {\n                cb = promiseCallback();\n            }\n\n            reduce$1(_functions, args, (newargs, fn, iterCb) => {\n                fn.apply(that, newargs.concat((err, ...nextargs) => {\n                    iterCb(err, nextargs);\n                }));\n            },\n            (err, results) => cb(err, ...results));\n\n            return cb[PROMISE_SYMBOL]\n        };\n    }\n\n    /**\n     * Creates a function which is a composition of the passed asynchronous\n     * functions. Each function consumes the return value of the function that\n     * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n     * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n     *\n     * If the last argument to the composed function is not a function, a promise\n     * is returned when you call it.\n     *\n     * Each function is executed with the `this` binding of the composed function.\n     *\n     * @name compose\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {...AsyncFunction} functions - the asynchronous functions to compose\n     * @returns {Function} an asynchronous function that is the composed\n     * asynchronous `functions`\n     * @example\n     *\n     * function add1(n, callback) {\n     *     setTimeout(function () {\n     *         callback(null, n + 1);\n     *     }, 10);\n     * }\n     *\n     * function mul3(n, callback) {\n     *     setTimeout(function () {\n     *         callback(null, n * 3);\n     *     }, 10);\n     * }\n     *\n     * var add1mul3 = async.compose(mul3, add1);\n     * add1mul3(4, function (err, result) {\n     *     // result now equals 15\n     * });\n     */\n    function compose(...args) {\n        return seq(...args.reverse());\n    }\n\n    /**\n     * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name mapLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.map]{@link module:Collections.map}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with the transformed item.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Results is an array of the\n     * transformed items from the `coll`. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapLimit (coll, limit, iteratee, callback) {\n        return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var mapLimit$1 = awaitify(mapLimit, 4);\n\n    /**\n     * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name concatLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.concat]{@link module:Collections.concat}\n     * @category Collection\n     * @alias flatMapLimit\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n     * which should use an array as its result. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is an array\n     * containing the concatenated results of the `iteratee` function. Invoked with\n     * (err, results).\n     * @returns A Promise, if no callback is passed\n     */\n    function concatLimit(coll, limit, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return mapLimit$1(coll, limit, (val, iterCb) => {\n            _iteratee(val, (err, ...args) => {\n                if (err) return iterCb(err);\n                return iterCb(err, args);\n            });\n        }, (err, mapResults) => {\n            var result = [];\n            for (var i = 0; i < mapResults.length; i++) {\n                if (mapResults[i]) {\n                    result = result.concat(...mapResults[i]);\n                }\n            }\n\n            return callback(err, result);\n        });\n    }\n    var concatLimit$1 = awaitify(concatLimit, 4);\n\n    /**\n     * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n     * the concatenated list. The `iteratee`s are called in parallel, and the\n     * results are concatenated as they return. The results array will be returned in\n     * the original order of `coll` passed to the `iteratee` function.\n     *\n     * @name concat\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @alias flatMap\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n     * which should use an array as its result. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is an array\n     * containing the concatenated results of the `iteratee` function. Invoked with\n     * (err, results).\n     * @returns A Promise, if no callback is passed\n     * @example\n     *\n     * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n     *     // files is now a list of filenames that exist in the 3 directories\n     * });\n     */\n    function concat(coll, iteratee, callback) {\n        return concatLimit$1(coll, Infinity, iteratee, callback)\n    }\n    var concat$1 = awaitify(concat, 3);\n\n    /**\n     * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n     *\n     * @name concatSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.concat]{@link module:Collections.concat}\n     * @category Collection\n     * @alias flatMapSeries\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n     * The iteratee should complete with an array an array of results.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is an array\n     * containing the concatenated results of the `iteratee` function. Invoked with\n     * (err, results).\n     * @returns A Promise, if no callback is passed\n     */\n    function concatSeries(coll, iteratee, callback) {\n        return concatLimit$1(coll, 1, iteratee, callback)\n    }\n    var concatSeries$1 = awaitify(concatSeries, 3);\n\n    /**\n     * Returns a function that when called, calls-back with the values provided.\n     * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n     * [`auto`]{@link module:ControlFlow.auto}.\n     *\n     * @name constant\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {...*} arguments... - Any number of arguments to automatically invoke\n     * callback with.\n     * @returns {AsyncFunction} Returns a function that when invoked, automatically\n     * invokes the callback with the previous given arguments.\n     * @example\n     *\n     * async.waterfall([\n     *     async.constant(42),\n     *     function (value, next) {\n     *         // value === 42\n     *     },\n     *     //...\n     * ], callback);\n     *\n     * async.waterfall([\n     *     async.constant(filename, \"utf8\"),\n     *     fs.readFile,\n     *     function (fileData, next) {\n     *         //...\n     *     }\n     *     //...\n     * ], callback);\n     *\n     * async.auto({\n     *     hostname: async.constant(\"https://server.net/\"),\n     *     port: findFreePort,\n     *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n     *         startServer(options, cb);\n     *     }],\n     *     //...\n     * }, callback);\n     */\n    function constant(...args) {\n        return function (...ignoredArgs/*, callback*/) {\n            var callback = ignoredArgs.pop();\n            return callback(null, ...args);\n        };\n    }\n\n    function _createTester(check, getResult) {\n        return (eachfn, arr, _iteratee, cb) => {\n            var testPassed = false;\n            var testResult;\n            const iteratee = wrapAsync(_iteratee);\n            eachfn(arr, (value, _, callback) => {\n                iteratee(value, (err, result) => {\n                    if (err || err === false) return callback(err);\n\n                    if (check(result) && !testResult) {\n                        testPassed = true;\n                        testResult = getResult(true, value);\n                        return callback(null, breakLoop);\n                    }\n                    callback();\n                });\n            }, err => {\n                if (err) return cb(err);\n                cb(null, testPassed ? testResult : getResult(false));\n            });\n        };\n    }\n\n    /**\n     * Returns the first value in `coll` that passes an async truth test. The\n     * `iteratee` is applied in parallel, meaning the first iteratee to return\n     * `true` will fire the detect `callback` with that result. That means the\n     * result might not be the first item in the original `coll` (in terms of order)\n     * that passes the test.\n\n     * If order within the original `coll` is important, then look at\n     * [`detectSeries`]{@link module:Collections.detectSeries}.\n     *\n     * @name detect\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias find\n     * @category Collections\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n     * The iteratee must complete with a boolean value as its result.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the `iteratee` functions have finished.\n     * Result will be the first item in the array that passes the truth test\n     * (iteratee) or the value `undefined` if none passed. Invoked with\n     * (err, result).\n     * @returns A Promise, if no callback is passed\n     * @example\n     *\n     * async.detect(['file1','file2','file3'], function(filePath, callback) {\n     *     fs.access(filePath, function(err) {\n     *         callback(null, !err)\n     *     });\n     * }, function(err, result) {\n     *     // result now equals the first file in the list that exists\n     * });\n     */\n    function detect(coll, iteratee, callback) {\n        return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n    }\n    var detect$1 = awaitify(detect, 3);\n\n    /**\n     * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name detectLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.detect]{@link module:Collections.detect}\n     * @alias findLimit\n     * @category Collections\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n     * The iteratee must complete with a boolean value as its result.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the `iteratee` functions have finished.\n     * Result will be the first item in the array that passes the truth test\n     * (iteratee) or the value `undefined` if none passed. Invoked with\n     * (err, result).\n     * @returns a Promise if no callback is passed\n     */\n    function detectLimit(coll, limit, iteratee, callback) {\n        return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var detectLimit$1 = awaitify(detectLimit, 4);\n\n    /**\n     * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n     *\n     * @name detectSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.detect]{@link module:Collections.detect}\n     * @alias findSeries\n     * @category Collections\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n     * The iteratee must complete with a boolean value as its result.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the `iteratee` functions have finished.\n     * Result will be the first item in the array that passes the truth test\n     * (iteratee) or the value `undefined` if none passed. Invoked with\n     * (err, result).\n     * @returns a Promise if no callback is passed\n     */\n    function detectSeries(coll, iteratee, callback) {\n        return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n    }\n\n    var detectSeries$1 = awaitify(detectSeries, 3);\n\n    function consoleFunc(name) {\n        return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n            if (typeof console === 'object') {\n                if (err) {\n                    if (console.error) {\n                        console.error(err);\n                    }\n                } else if (console[name]) {\n                    resultArgs.forEach(x => console[name](x));\n                }\n            }\n        })\n    }\n\n    /**\n     * Logs the result of an [`async` function]{@link AsyncFunction} to the\n     * `console` using `console.dir` to display the properties of the resulting object.\n     * Only works in Node.js or in browsers that support `console.dir` and\n     * `console.error` (such as FF and Chrome).\n     * If multiple arguments are returned from the async function,\n     * `console.dir` is called on each argument in order.\n     *\n     * @name dir\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} function - The function you want to eventually apply\n     * all arguments to.\n     * @param {...*} arguments... - Any number of arguments to apply to the function.\n     * @example\n     *\n     * // in a module\n     * var hello = function(name, callback) {\n     *     setTimeout(function() {\n     *         callback(null, {hello: name});\n     *     }, 1000);\n     * };\n     *\n     * // in the node repl\n     * node> async.dir(hello, 'world');\n     * {hello: 'world'}\n     */\n    var dir = consoleFunc('dir');\n\n    /**\n     * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n     * the order of operations, the arguments `test` and `iteratee` are switched.\n     *\n     * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n     *\n     * @name doWhilst\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.whilst]{@link module:ControlFlow.whilst}\n     * @category Control Flow\n     * @param {AsyncFunction} iteratee - A function which is called each time `test`\n     * passes. Invoked with (callback).\n     * @param {AsyncFunction} test - asynchronous truth test to perform after each\n     * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n     * non-error args from the previous callback of `iteratee`.\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has failed and repeated execution of `iteratee` has stopped.\n     * `callback` will be passed an error and any arguments passed to the final\n     * `iteratee`'s callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function doWhilst(iteratee, test, callback) {\n        callback = onlyOnce(callback);\n        var _fn = wrapAsync(iteratee);\n        var _test = wrapAsync(test);\n        var results;\n\n        function next(err, ...args) {\n            if (err) return callback(err);\n            if (err === false) return;\n            results = args;\n            _test(...args, check);\n        }\n\n        function check(err, truth) {\n            if (err) return callback(err);\n            if (err === false) return;\n            if (!truth) return callback(null, ...results);\n            _fn(next);\n        }\n\n        return check(null, true);\n    }\n\n    var doWhilst$1 = awaitify(doWhilst, 3);\n\n    /**\n     * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n     * argument ordering differs from `until`.\n     *\n     * @name doUntil\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n     * @category Control Flow\n     * @param {AsyncFunction} iteratee - An async function which is called each time\n     * `test` fails. Invoked with (callback).\n     * @param {AsyncFunction} test - asynchronous truth test to perform after each\n     * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n     * non-error args from the previous callback of `iteratee`\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has passed and repeated execution of `iteratee` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `iteratee`'s\n     * callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function doUntil(iteratee, test, callback) {\n        const _test = wrapAsync(test);\n        return doWhilst$1(iteratee, (...args) => {\n            const cb = args.pop();\n            _test(...args, (err, truth) => cb (err, !truth));\n        }, callback);\n    }\n\n    function _withoutIndex(iteratee) {\n        return (value, index, callback) => iteratee(value, callback);\n    }\n\n    /**\n     * Applies the function `iteratee` to each item in `coll`, in parallel.\n     * The `iteratee` is called with an item from the list, and a callback for when\n     * it has finished. If the `iteratee` passes an error to its `callback`, the\n     * main `callback` (for the `each` function) is immediately called with the\n     * error.\n     *\n     * Note, that since this function applies `iteratee` to each item in parallel,\n     * there is no guarantee that the iteratee functions will complete in order.\n     *\n     * @name each\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias forEach\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to\n     * each item in `coll`. Invoked with (item, callback).\n     * The array index is not passed to the iteratee.\n     * If you need the index, use `eachOf`.\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * // assuming openFiles is an array of file names and saveFile is a function\n     * // to save the modified contents of that file:\n     *\n     * async.each(openFiles, saveFile, function(err){\n     *   // if any of the saves produced an error, err would equal that error\n     * });\n     *\n     * // assuming openFiles is an array of file names\n     * async.each(openFiles, function(file, callback) {\n     *\n     *     // Perform operation on file here.\n     *     console.log('Processing file ' + file);\n     *\n     *     if( file.length > 32 ) {\n     *       console.log('This file name is too long');\n     *       callback('File name too long');\n     *     } else {\n     *       // Do work to process file here\n     *       console.log('File processed');\n     *       callback();\n     *     }\n     * }, function(err) {\n     *     // if any of the file processing produced an error, err would equal that error\n     *     if( err ) {\n     *       // One of the iterations produced an error.\n     *       // All processing will now stop.\n     *       console.log('A file failed to process');\n     *     } else {\n     *       console.log('All files have been processed successfully');\n     *     }\n     * });\n     */\n    function eachLimit(coll, iteratee, callback) {\n        return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n    }\n\n    var each = awaitify(eachLimit, 3);\n\n    /**\n     * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name eachLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.each]{@link module:Collections.each}\n     * @alias forEachLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The array index is not passed to the iteratee.\n     * If you need the index, use `eachOfLimit`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachLimit$1(coll, limit, iteratee, callback) {\n        return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n    }\n    var eachLimit$2 = awaitify(eachLimit$1, 4);\n\n    /**\n     * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n     *\n     * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n     * in series and therefore the iteratee functions will complete in order.\n\n     * @name eachSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.each]{@link module:Collections.each}\n     * @alias forEachSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each\n     * item in `coll`.\n     * The array index is not passed to the iteratee.\n     * If you need the index, use `eachOfSeries`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachSeries(coll, iteratee, callback) {\n        return eachLimit$2(coll, 1, iteratee, callback)\n    }\n    var eachSeries$1 = awaitify(eachSeries, 3);\n\n    /**\n     * Wrap an async function and ensure it calls its callback on a later tick of\n     * the event loop.  If the function already calls its callback on a next tick,\n     * no extra deferral is added. This is useful for preventing stack overflows\n     * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n     * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n     * contained. ES2017 `async` functions are returned as-is -- they are immune\n     * to Zalgo's corrupting influences, as they always resolve on a later tick.\n     *\n     * @name ensureAsync\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} fn - an async function, one that expects a node-style\n     * callback as its last argument.\n     * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n     * signature as the function passed in.\n     * @example\n     *\n     * function sometimesAsync(arg, callback) {\n     *     if (cache[arg]) {\n     *         return callback(null, cache[arg]); // this would be synchronous!!\n     *     } else {\n     *         doSomeIO(arg, callback); // this IO would be asynchronous\n     *     }\n     * }\n     *\n     * // this has a risk of stack overflows if many results are cached in a row\n     * async.mapSeries(args, sometimesAsync, done);\n     *\n     * // this will defer sometimesAsync's callback if necessary,\n     * // preventing stack overflows\n     * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n     */\n    function ensureAsync(fn) {\n        if (isAsync(fn)) return fn;\n        return function (...args/*, callback*/) {\n            var callback = args.pop();\n            var sync = true;\n            args.push((...innerArgs) => {\n                if (sync) {\n                    setImmediate$1(() => callback(...innerArgs));\n                } else {\n                    callback(...innerArgs);\n                }\n            });\n            fn.apply(this, args);\n            sync = false;\n        };\n    }\n\n    /**\n     * Returns `true` if every element in `coll` satisfies an async test. If any\n     * iteratee call returns `false`, the main `callback` is immediately called.\n     *\n     * @name every\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias all\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collection in parallel.\n     * The iteratee must complete with a boolean result value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result will be either `true` or `false`\n     * depending on the values of the async tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * async.every(['file1','file2','file3'], function(filePath, callback) {\n     *     fs.access(filePath, function(err) {\n     *         callback(null, !err)\n     *     });\n     * }, function(err, result) {\n     *     // if result is true then every file exists\n     * });\n     */\n    function every(coll, iteratee, callback) {\n        return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n    }\n    var every$1 = awaitify(every, 3);\n\n    /**\n     * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name everyLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.every]{@link module:Collections.every}\n     * @alias allLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collection in parallel.\n     * The iteratee must complete with a boolean result value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result will be either `true` or `false`\n     * depending on the values of the async tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function everyLimit(coll, limit, iteratee, callback) {\n        return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var everyLimit$1 = awaitify(everyLimit, 4);\n\n    /**\n     * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n     *\n     * @name everySeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.every]{@link module:Collections.every}\n     * @alias allSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collection in series.\n     * The iteratee must complete with a boolean result value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result will be either `true` or `false`\n     * depending on the values of the async tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function everySeries(coll, iteratee, callback) {\n        return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var everySeries$1 = awaitify(everySeries, 3);\n\n    function filterArray(eachfn, arr, iteratee, callback) {\n        var truthValues = new Array(arr.length);\n        eachfn(arr, (x, index, iterCb) => {\n            iteratee(x, (err, v) => {\n                truthValues[index] = !!v;\n                iterCb(err);\n            });\n        }, err => {\n            if (err) return callback(err);\n            var results = [];\n            for (var i = 0; i < arr.length; i++) {\n                if (truthValues[i]) results.push(arr[i]);\n            }\n            callback(null, results);\n        });\n    }\n\n    function filterGeneric(eachfn, coll, iteratee, callback) {\n        var results = [];\n        eachfn(coll, (x, index, iterCb) => {\n            iteratee(x, (err, v) => {\n                if (err) return iterCb(err);\n                if (v) {\n                    results.push({index, value: x});\n                }\n                iterCb(err);\n            });\n        }, err => {\n            if (err) return callback(err);\n            callback(null, results\n                .sort((a, b) => a.index - b.index)\n                .map(v => v.value));\n        });\n    }\n\n    function _filter(eachfn, coll, iteratee, callback) {\n        var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n        return filter(eachfn, coll, wrapAsync(iteratee), callback);\n    }\n\n    /**\n     * Returns a new array of all the values in `coll` which pass an async truth\n     * test. This operation is performed in parallel, but the results array will be\n     * in the same order as the original.\n     *\n     * @name filter\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias select\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n     * with a boolean argument once it has completed. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * async.filter(['file1','file2','file3'], function(filePath, callback) {\n     *     fs.access(filePath, function(err) {\n     *         callback(null, !err)\n     *     });\n     * }, function(err, results) {\n     *     // results now equals an array of the existing files\n     * });\n     */\n    function filter (coll, iteratee, callback) {\n        return _filter(eachOf$1, coll, iteratee, callback)\n    }\n    var filter$1 = awaitify(filter, 3);\n\n    /**\n     * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name filterLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.filter]{@link module:Collections.filter}\n     * @alias selectLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n     * with a boolean argument once it has completed. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function filterLimit (coll, limit, iteratee, callback) {\n        return _filter(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var filterLimit$1 = awaitify(filterLimit, 4);\n\n    /**\n     * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n     *\n     * @name filterSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.filter]{@link module:Collections.filter}\n     * @alias selectSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n     * with a boolean argument once it has completed. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results)\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function filterSeries (coll, iteratee, callback) {\n        return _filter(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var filterSeries$1 = awaitify(filterSeries, 3);\n\n    /**\n     * Calls the asynchronous function `fn` with a callback parameter that allows it\n     * to call itself again, in series, indefinitely.\n\n     * If an error is passed to the callback then `errback` is called with the\n     * error, and execution stops, otherwise it will never be called.\n     *\n     * @name forever\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {AsyncFunction} fn - an async function to call repeatedly.\n     * Invoked with (next).\n     * @param {Function} [errback] - when `fn` passes an error to it's callback,\n     * this function will be called, and execution stops. Invoked with (err).\n     * @returns {Promise} a promise that rejects if an error occurs and an errback\n     * is not passed\n     * @example\n     *\n     * async.forever(\n     *     function(next) {\n     *         // next is suitable for passing to things that need a callback(err [, whatever]);\n     *         // it will result in this function being called again.\n     *     },\n     *     function(err) {\n     *         // if next is called with a value in its first parameter, it will appear\n     *         // in here as 'err', and execution will stop.\n     *     }\n     * );\n     */\n    function forever(fn, errback) {\n        var done = onlyOnce(errback);\n        var task = wrapAsync(ensureAsync(fn));\n\n        function next(err) {\n            if (err) return done(err);\n            if (err === false) return;\n            task(next);\n        }\n        return next();\n    }\n    var forever$1 = awaitify(forever, 2);\n\n    /**\n     * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name groupByLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.groupBy]{@link module:Collections.groupBy}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a `key` to group the value under.\n     * Invoked with (value, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Result is an `Object` whose\n     * properties are arrays of values which returned the corresponding key.\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function groupByLimit(coll, limit, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return mapLimit$1(coll, limit, (val, iterCb) => {\n            _iteratee(val, (err, key) => {\n                if (err) return iterCb(err);\n                return iterCb(err, {key, val});\n            });\n        }, (err, mapResults) => {\n            var result = {};\n            // from MDN, handle object having an `hasOwnProperty` prop\n            var {hasOwnProperty} = Object.prototype;\n\n            for (var i = 0; i < mapResults.length; i++) {\n                if (mapResults[i]) {\n                    var {key} = mapResults[i];\n                    var {val} = mapResults[i];\n\n                    if (hasOwnProperty.call(result, key)) {\n                        result[key].push(val);\n                    } else {\n                        result[key] = [val];\n                    }\n                }\n            }\n\n            return callback(err, result);\n        });\n    }\n\n    var groupByLimit$1 = awaitify(groupByLimit, 4);\n\n    /**\n     * Returns a new object, where each value corresponds to an array of items, from\n     * `coll`, that returned the corresponding key. That is, the keys of the object\n     * correspond to the values passed to the `iteratee` callback.\n     *\n     * Note: Since this function applies the `iteratee` to each item in parallel,\n     * there is no guarantee that the `iteratee` functions will complete in order.\n     * However, the values for each key in the `result` will be in the same order as\n     * the original `coll`. For Objects, the values will roughly be in the order of\n     * the original Objects' keys (but this can vary across JavaScript engines).\n     *\n     * @name groupBy\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a `key` to group the value under.\n     * Invoked with (value, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Result is an `Object` whose\n     * properties are arrays of values which returned the corresponding key.\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n     *     db.findById(userId, function(err, user) {\n     *         if (err) return callback(err);\n     *         return callback(null, user.age);\n     *     });\n     * }, function(err, result) {\n     *     // result is object containing the userIds grouped by age\n     *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n     * });\n     */\n    function groupBy (coll, iteratee, callback) {\n        return groupByLimit$1(coll, Infinity, iteratee, callback)\n    }\n\n    /**\n     * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n     *\n     * @name groupBySeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.groupBy]{@link module:Collections.groupBy}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a `key` to group the value under.\n     * Invoked with (value, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Result is an `Object` whose\n     * properties are arrays of values which returned the corresponding key.\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function groupBySeries (coll, iteratee, callback) {\n        return groupByLimit$1(coll, 1, iteratee, callback)\n    }\n\n    /**\n     * Logs the result of an `async` function to the `console`. Only works in\n     * Node.js or in browsers that support `console.log` and `console.error` (such\n     * as FF and Chrome). If multiple arguments are returned from the async\n     * function, `console.log` is called on each argument in order.\n     *\n     * @name log\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} function - The function you want to eventually apply\n     * all arguments to.\n     * @param {...*} arguments... - Any number of arguments to apply to the function.\n     * @example\n     *\n     * // in a module\n     * var hello = function(name, callback) {\n     *     setTimeout(function() {\n     *         callback(null, 'hello ' + name);\n     *     }, 1000);\n     * };\n     *\n     * // in the node repl\n     * node> async.log(hello, 'world');\n     * 'hello world'\n     */\n    var log = consoleFunc('log');\n\n    /**\n     * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name mapValuesLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.mapValues]{@link module:Collections.mapValues}\n     * @category Collection\n     * @param {Object} obj - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - A function to apply to each value and key\n     * in `coll`.\n     * The iteratee should complete with the transformed value as its result.\n     * Invoked with (value, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. `result` is a new object consisting\n     * of each key from `obj`, with each transformed value on the right-hand side.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapValuesLimit(obj, limit, iteratee, callback) {\n        callback = once(callback);\n        var newObj = {};\n        var _iteratee = wrapAsync(iteratee);\n        return eachOfLimit(limit)(obj, (val, key, next) => {\n            _iteratee(val, key, (err, result) => {\n                if (err) return next(err);\n                newObj[key] = result;\n                next(err);\n            });\n        }, err => callback(err, newObj));\n    }\n\n    var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n    /**\n     * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n     *\n     * Produces a new Object by mapping each value of `obj` through the `iteratee`\n     * function. The `iteratee` is called each `value` and `key` from `obj` and a\n     * callback for when it has finished processing. Each of these callbacks takes\n     * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n     * passes an error to its callback, the main `callback` (for the `mapValues`\n     * function) is immediately called with the error.\n     *\n     * Note, the order of the keys in the result is not guaranteed.  The keys will\n     * be roughly in the order they complete, (but this is very engine-specific)\n     *\n     * @name mapValues\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Object} obj - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each value and key\n     * in `coll`.\n     * The iteratee should complete with the transformed value as its result.\n     * Invoked with (value, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. `result` is a new object consisting\n     * of each key from `obj`, with each transformed value on the right-hand side.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * async.mapValues({\n     *     f1: 'file1',\n     *     f2: 'file2',\n     *     f3: 'file3'\n     * }, function (file, key, callback) {\n     *   fs.stat(file, callback);\n     * }, function(err, result) {\n     *     // result is now a map of stats for each file, e.g.\n     *     // {\n     *     //     f1: [stats for file1],\n     *     //     f2: [stats for file2],\n     *     //     f3: [stats for file3]\n     *     // }\n     * });\n     */\n    function mapValues(obj, iteratee, callback) {\n        return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n    }\n\n    /**\n     * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n     *\n     * @name mapValuesSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.mapValues]{@link module:Collections.mapValues}\n     * @category Collection\n     * @param {Object} obj - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each value and key\n     * in `coll`.\n     * The iteratee should complete with the transformed value as its result.\n     * Invoked with (value, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. `result` is a new object consisting\n     * of each key from `obj`, with each transformed value on the right-hand side.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapValuesSeries(obj, iteratee, callback) {\n        return mapValuesLimit$1(obj, 1, iteratee, callback)\n    }\n\n    /**\n     * Caches the results of an async function. When creating a hash to store\n     * function results against, the callback is omitted from the hash and an\n     * optional hash function can be used.\n     *\n     * **Note: if the async function errs, the result will not be cached and\n     * subsequent calls will call the wrapped function.**\n     *\n     * If no hash function is specified, the first argument is used as a hash key,\n     * which may work reasonably if it is a string or a data type that converts to a\n     * distinct string. Note that objects and arrays will not behave reasonably.\n     * Neither will cases where the other arguments are significant. In such cases,\n     * specify your own hash function.\n     *\n     * The cache of results is exposed as the `memo` property of the function\n     * returned by `memoize`.\n     *\n     * @name memoize\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n     * @param {Function} hasher - An optional function for generating a custom hash\n     * for storing results. It has all the arguments applied to it apart from the\n     * callback, and must be synchronous.\n     * @returns {AsyncFunction} a memoized version of `fn`\n     * @example\n     *\n     * var slow_fn = function(name, callback) {\n     *     // do something\n     *     callback(null, result);\n     * };\n     * var fn = async.memoize(slow_fn);\n     *\n     * // fn can now be used as if it were slow_fn\n     * fn('some name', function() {\n     *     // callback\n     * });\n     */\n    function memoize(fn, hasher = v => v) {\n        var memo = Object.create(null);\n        var queues = Object.create(null);\n        var _fn = wrapAsync(fn);\n        var memoized = initialParams((args, callback) => {\n            var key = hasher(...args);\n            if (key in memo) {\n                setImmediate$1(() => callback(null, ...memo[key]));\n            } else if (key in queues) {\n                queues[key].push(callback);\n            } else {\n                queues[key] = [callback];\n                _fn(...args, (err, ...resultArgs) => {\n                    // #1465 don't memoize if an error occurred\n                    if (!err) {\n                        memo[key] = resultArgs;\n                    }\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                        q[i](err, ...resultArgs);\n                    }\n                });\n            }\n        });\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    }\n\n    /**\n     * Calls `callback` on a later loop around the event loop. In Node.js this just\n     * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n     * available, otherwise `setTimeout(callback, 0)`, which means other higher\n     * priority events may precede the execution of `callback`.\n     *\n     * This is used internally for browser-compatibility purposes.\n     *\n     * @name nextTick\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @see [async.setImmediate]{@link module:Utils.setImmediate}\n     * @category Util\n     * @param {Function} callback - The function to call on a later loop around\n     * the event loop. Invoked with (args...).\n     * @param {...*} args... - any number of additional arguments to pass to the\n     * callback on the next tick.\n     * @example\n     *\n     * var call_order = [];\n     * async.nextTick(function() {\n     *     call_order.push('two');\n     *     // call_order now equals ['one','two']\n     * });\n     * call_order.push('one');\n     *\n     * async.setImmediate(function (a, b, c) {\n     *     // a, b, and c equal 1, 2, and 3\n     * }, 1, 2, 3);\n     */\n    var _defer$1;\n\n    if (hasNextTick) {\n        _defer$1 = process.nextTick;\n    } else if (hasSetImmediate) {\n        _defer$1 = setImmediate;\n    } else {\n        _defer$1 = fallback;\n    }\n\n    var nextTick = wrap(_defer$1);\n\n    var parallel = awaitify((eachfn, tasks, callback) => {\n        var results = isArrayLike(tasks) ? [] : {};\n\n        eachfn(tasks, (task, key, taskCb) => {\n            wrapAsync(task)((err, ...result) => {\n                if (result.length < 2) {\n                    [result] = result;\n                }\n                results[key] = result;\n                taskCb(err);\n            });\n        }, err => callback(err, results));\n    }, 3);\n\n    /**\n     * Run the `tasks` collection of functions in parallel, without waiting until\n     * the previous function has completed. If any of the functions pass an error to\n     * its callback, the main `callback` is immediately called with the value of the\n     * error. Once the `tasks` have completed, the results are passed to the final\n     * `callback` as an array.\n     *\n     * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n     * parallel execution of code.  If your tasks do not use any timers or perform\n     * any I/O, they will actually be executed in series.  Any synchronous setup\n     * sections for each task will happen one after the other.  JavaScript remains\n     * single-threaded.\n     *\n     * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n     * execution of other tasks when a task fails.\n     *\n     * It is also possible to use an object instead of an array. Each property will\n     * be run as a function and the results will be passed to the final `callback`\n     * as an object instead of an array. This can be a more readable way of handling\n     * results from {@link async.parallel}.\n     *\n     * @name parallel\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n     * [async functions]{@link AsyncFunction} to run.\n     * Each async function can complete with any number of optional `result` values.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed successfully. This function gets a results array\n     * (or object) containing all the result arguments passed to the task callbacks.\n     * Invoked with (err, results).\n     * @returns {Promise} a promise, if a callback is not passed\n     *\n     * @example\n     * async.parallel([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ],\n     * // optional callback\n     * function(err, results) {\n     *     // the results array will equal ['one','two'] even though\n     *     // the second function had a shorter timeout.\n     * });\n     *\n     * // an example using an object instead of an array\n     * async.parallel({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }, function(err, results) {\n     *     // results is now equals to: {one: 1, two: 2}\n     * });\n     */\n    function parallel$1(tasks, callback) {\n        return parallel(eachOf$1, tasks, callback);\n    }\n\n    /**\n     * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name parallelLimit\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.parallel]{@link module:ControlFlow.parallel}\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n     * [async functions]{@link AsyncFunction} to run.\n     * Each async function can complete with any number of optional `result` values.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed successfully. This function gets a results array\n     * (or object) containing all the result arguments passed to the task callbacks.\n     * Invoked with (err, results).\n     * @returns {Promise} a promise, if a callback is not passed\n     */\n    function parallelLimit(tasks, limit, callback) {\n        return parallel(eachOfLimit(limit), tasks, callback);\n    }\n\n    /**\n     * A queue of tasks for the worker function to complete.\n     * @typedef {Iterable} QueueObject\n     * @memberOf module:ControlFlow\n     * @property {Function} length - a function returning the number of items\n     * waiting to be processed. Invoke with `queue.length()`.\n     * @property {boolean} started - a boolean indicating whether or not any\n     * items have been pushed and processed by the queue.\n     * @property {Function} running - a function returning the number of items\n     * currently being processed. Invoke with `queue.running()`.\n     * @property {Function} workersList - a function returning the array of items\n     * currently being processed. Invoke with `queue.workersList()`.\n     * @property {Function} idle - a function returning false if there are items\n     * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n     * @property {number} concurrency - an integer for determining how many `worker`\n     * functions should be run in parallel. This property can be changed after a\n     * `queue` is created to alter the concurrency on-the-fly.\n     * @property {number} payload - an integer that specifies how many items are\n     * passed to the worker function at a time. only applies if this is a\n     * [cargo]{@link module:ControlFlow.cargo} object\n     * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n     * once the `worker` has finished processing the task. Instead of a single task,\n     * a `tasks` array can be submitted. The respective callback is used for every\n     * task in the list. Invoke with `queue.push(task, [callback])`,\n     * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n     * Invoke with `queue.unshift(task, [callback])`.\n     * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n     * a promise that rejects if an error occurs.\n     * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n     * a promise that rejects if an error occurs.\n     * @property {Function} remove - remove items from the queue that match a test\n     * function.  The test function will be passed an object with a `data` property,\n     * and a `priority` property, if this is a\n     * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n     * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n     * `function ({data, priority}) {}` and returns a Boolean.\n     * @property {Function} saturated - a function that sets a callback that is\n     * called when the number of running workers hits the `concurrency` limit, and\n     * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n     * returns a promise for the next occurrence.\n     * @property {Function} unsaturated - a function that sets a callback that is\n     * called when the number of running workers is less than the `concurrency` &\n     * `buffer` limits, and further tasks will not be queued. If the callback is\n     * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n     * @property {number} buffer - A minimum threshold buffer in order to say that\n     * the `queue` is `unsaturated`.\n     * @property {Function} empty - a function that sets a callback that is called\n     * when the last item from the `queue` is given to a `worker`. If the callback\n     * is omitted, `q.empty()` returns a promise for the next occurrence.\n     * @property {Function} drain - a function that sets a callback that is called\n     * when the last item from the `queue` has returned from the `worker`. If the\n     * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n     * @property {Function} error - a function that sets a callback that is called\n     * when a task errors. Has the signature `function(error, task)`. If the\n     * callback is omitted, `error()` returns a promise that rejects on the next\n     * error.\n     * @property {boolean} paused - a boolean for determining whether the queue is\n     * in a paused state.\n     * @property {Function} pause - a function that pauses the processing of tasks\n     * until `resume()` is called. Invoke with `queue.pause()`.\n     * @property {Function} resume - a function that resumes the processing of\n     * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n     * @property {Function} kill - a function that removes the `drain` callback and\n     * empties remaining tasks from the queue forcing it to go idle. No more tasks\n     * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n     *\n     * @example\n     * const q = async.queue(worker, 2)\n     * q.push(item1)\n     * q.push(item2)\n     * q.push(item3)\n     * // queues are iterable, spread into an array to inspect\n     * const items = [...q] // [item1, item2, item3]\n     * // or use for of\n     * for (let item of q) {\n     *     console.log(item)\n     * }\n     *\n     * q.drain(() => {\n     *     console.log('all done')\n     * })\n     * // or\n     * await q.drain()\n     */\n\n    /**\n     * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n     * `queue` are processed in parallel (up to the `concurrency` limit). If all\n     * `worker`s are in progress, the task is queued until one becomes available.\n     * Once a `worker` completes a `task`, that `task`'s callback is called.\n     *\n     * @name queue\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An async function for processing a queued task.\n     * If you want to handle errors from an individual task, pass a callback to\n     * `q.push()`. Invoked with (task, callback).\n     * @param {number} [concurrency=1] - An `integer` for determining how many\n     * `worker` functions should be run in parallel.  If omitted, the concurrency\n     * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n     * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n     * attached as certain properties to listen for specific events during the\n     * lifecycle of the queue.\n     * @example\n     *\n     * // create a queue object with concurrency 2\n     * var q = async.queue(function(task, callback) {\n     *     console.log('hello ' + task.name);\n     *     callback();\n     * }, 2);\n     *\n     * // assign a callback\n     * q.drain(function() {\n     *     console.log('all items have been processed');\n     * });\n     * // or await the end\n     * await q.drain()\n     *\n     * // assign an error callback\n     * q.error(function(err, task) {\n     *     console.error('task experienced an error');\n     * });\n     *\n     * // add some items to the queue\n     * q.push({name: 'foo'}, function(err) {\n     *     console.log('finished processing foo');\n     * });\n     * // callback is optional\n     * q.push({name: 'bar'});\n     *\n     * // add some items to the queue (batch-wise)\n     * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n     *     console.log('finished processing item');\n     * });\n     *\n     * // add some items to the front of the queue\n     * q.unshift({name: 'bar'}, function (err) {\n     *     console.log('finished processing bar');\n     * });\n     */\n    function queue$1 (worker, concurrency) {\n        var _worker = wrapAsync(worker);\n        return queue((items, cb) => {\n            _worker(items[0], cb);\n        }, concurrency, 1);\n    }\n\n    // Binary min-heap implementation used for priority queue.\n    // Implementation is stable, i.e. push time is considered for equal priorities\n    class Heap {\n        constructor() {\n            this.heap = [];\n            this.pushCount = Number.MIN_SAFE_INTEGER;\n        }\n\n        get length() {\n            return this.heap.length;\n        }\n\n        empty () {\n            this.heap = [];\n            return this;\n        }\n\n        percUp(index) {\n            let p;\n\n            while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n                let t = this.heap[index];\n                this.heap[index] = this.heap[p];\n                this.heap[p] = t;\n\n                index = p;\n            }\n        }\n\n        percDown(index) {\n            let l;\n\n            while ((l=leftChi(index)) < this.heap.length) {\n                if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                    l = l+1;\n                }\n\n                if (smaller(this.heap[index], this.heap[l])) {\n                    break;\n                }\n\n                let t = this.heap[index];\n                this.heap[index] = this.heap[l];\n                this.heap[l] = t;\n\n                index = l;\n            }\n        }\n\n        push(node) {\n            node.pushCount = ++this.pushCount;\n            this.heap.push(node);\n            this.percUp(this.heap.length-1);\n        }\n\n        unshift(node) {\n            return this.heap.push(node);\n        }\n\n        shift() {\n            let [top] = this.heap;\n\n            this.heap[0] = this.heap[this.heap.length-1];\n            this.heap.pop();\n            this.percDown(0);\n\n            return top;\n        }\n\n        toArray() {\n            return [...this];\n        }\n\n        *[Symbol.iterator] () {\n            for (let i = 0; i < this.heap.length; i++) {\n                yield this.heap[i].data;\n            }\n        }\n\n        remove (testFn) {\n            let j = 0;\n            for (let i = 0; i < this.heap.length; i++) {\n                if (!testFn(this.heap[i])) {\n                    this.heap[j] = this.heap[i];\n                    j++;\n                }\n            }\n\n            this.heap.splice(j);\n\n            for (let i = parent(this.heap.length-1); i >= 0; i--) {\n                this.percDown(i);\n            }\n\n            return this;\n        }\n    }\n\n    function leftChi(i) {\n        return (i<<1)+1;\n    }\n\n    function parent(i) {\n        return ((i+1)>>1)-1;\n    }\n\n    function smaller(x, y) {\n        if (x.priority !== y.priority) {\n            return x.priority < y.priority;\n        }\n        else {\n            return x.pushCount < y.pushCount;\n        }\n    }\n\n    /**\n     * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n     * completed in ascending priority order.\n     *\n     * @name priorityQueue\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.queue]{@link module:ControlFlow.queue}\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An async function for processing a queued task.\n     * If you want to handle errors from an individual task, pass a callback to\n     * `q.push()`.\n     * Invoked with (task, callback).\n     * @param {number} concurrency - An `integer` for determining how many `worker`\n     * functions should be run in parallel.  If omitted, the concurrency defaults to\n     * `1`.  If the concurrency is `0`, an error is thrown.\n     * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n     * differences between `queue` and `priorityQueue` objects:\n     * * `push(task, priority, [callback])` - `priority` should be a number. If an\n     *   array of `tasks` is given, all tasks will be assigned the same priority.\n     * * The `unshift` method was removed.\n     */\n    function priorityQueue(worker, concurrency) {\n        // Start with a normal queue\n        var q = queue$1(worker, concurrency);\n\n        q._tasks = new Heap();\n\n        // Override push to accept second parameter representing priority\n        q.push = function(data, priority = 0, callback = () => {}) {\n            if (typeof callback !== 'function') {\n                throw new Error('task callback must be a function');\n            }\n            q.started = true;\n            if (!Array.isArray(data)) {\n                data = [data];\n            }\n            if (data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                return setImmediate$1(() => q.drain());\n            }\n\n            for (var i = 0, l = data.length; i < l; i++) {\n                var item = {\n                    data: data[i],\n                    priority,\n                    callback\n                };\n\n                q._tasks.push(item);\n            }\n\n            setImmediate$1(q.process);\n        };\n\n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    }\n\n    /**\n     * Runs the `tasks` array of functions in parallel, without waiting until the\n     * previous function has completed. Once any of the `tasks` complete or pass an\n     * error to its callback, the main `callback` is immediately called. It's\n     * equivalent to `Promise.race()`.\n     *\n     * @name race\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n     * to run. Each function can complete with an optional `result` value.\n     * @param {Function} callback - A callback to run once any of the functions have\n     * completed. This function gets an error or result from the first function that\n     * completed. Invoked with (err, result).\n     * @returns undefined\n     * @example\n     *\n     * async.race([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ],\n     * // main callback\n     * function(err, result) {\n     *     // the result will be equal to 'two' as it finishes earlier\n     * });\n     */\n    function race(tasks, callback) {\n        callback = once(callback);\n        if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n        if (!tasks.length) return callback();\n        for (var i = 0, l = tasks.length; i < l; i++) {\n            wrapAsync(tasks[i])(callback);\n        }\n    }\n\n    var race$1 = awaitify(race, 2);\n\n    /**\n     * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n     *\n     * @name reduceRight\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.reduce]{@link module:Collections.reduce}\n     * @alias foldr\n     * @category Collection\n     * @param {Array} array - A collection to iterate over.\n     * @param {*} memo - The initial state of the reduction.\n     * @param {AsyncFunction} iteratee - A function applied to each item in the\n     * array to produce the next step in the reduction.\n     * The `iteratee` should complete with the next state of the reduction.\n     * If the iteratee complete with an error, the reduction is stopped and the\n     * main `callback` is immediately called with the error.\n     * Invoked with (memo, item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result is the reduced value. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function reduceRight (array, memo, iteratee, callback) {\n        var reversed = [...array].reverse();\n        return reduce$1(reversed, memo, iteratee, callback);\n    }\n\n    /**\n     * Wraps the async function in another function that always completes with a\n     * result object, even when it errors.\n     *\n     * The result object has either the property `error` or `value`.\n     *\n     * @name reflect\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} fn - The async function you want to wrap\n     * @returns {Function} - A function that always passes null to it's callback as\n     * the error. The second argument to the callback will be an `object` with\n     * either an `error` or a `value` property.\n     * @example\n     *\n     * async.parallel([\n     *     async.reflect(function(callback) {\n     *         // do some stuff ...\n     *         callback(null, 'one');\n     *     }),\n     *     async.reflect(function(callback) {\n     *         // do some more stuff but error ...\n     *         callback('bad stuff happened');\n     *     }),\n     *     async.reflect(function(callback) {\n     *         // do some more stuff ...\n     *         callback(null, 'two');\n     *     })\n     * ],\n     * // optional callback\n     * function(err, results) {\n     *     // values\n     *     // results[0].value = 'one'\n     *     // results[1].error = 'bad stuff happened'\n     *     // results[2].value = 'two'\n     * });\n     */\n    function reflect(fn) {\n        var _fn = wrapAsync(fn);\n        return initialParams(function reflectOn(args, reflectCallback) {\n            args.push((error, ...cbArgs) => {\n                let retVal = {};\n                if (error) {\n                    retVal.error = error;\n                }\n                if (cbArgs.length > 0){\n                    var value = cbArgs;\n                    if (cbArgs.length <= 1) {\n                        [value] = cbArgs;\n                    }\n                    retVal.value = value;\n                }\n                reflectCallback(null, retVal);\n            });\n\n            return _fn.apply(this, args);\n        });\n    }\n\n    /**\n     * A helper function that wraps an array or an object of functions with `reflect`.\n     *\n     * @name reflectAll\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @see [async.reflect]{@link module:Utils.reflect}\n     * @category Util\n     * @param {Array|Object|Iterable} tasks - The collection of\n     * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n     * @returns {Array} Returns an array of async functions, each wrapped in\n     * `async.reflect`\n     * @example\n     *\n     * let tasks = [\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         // do some more stuff but error ...\n     *         callback(new Error('bad stuff happened'));\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ];\n     *\n     * async.parallel(async.reflectAll(tasks),\n     * // optional callback\n     * function(err, results) {\n     *     // values\n     *     // results[0].value = 'one'\n     *     // results[1].error = Error('bad stuff happened')\n     *     // results[2].value = 'two'\n     * });\n     *\n     * // an example using an object instead of an array\n     * let tasks = {\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         callback('two');\n     *     },\n     *     three: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'three');\n     *         }, 100);\n     *     }\n     * };\n     *\n     * async.parallel(async.reflectAll(tasks),\n     * // optional callback\n     * function(err, results) {\n     *     // values\n     *     // results.one.value = 'one'\n     *     // results.two.error = 'two'\n     *     // results.three.value = 'three'\n     * });\n     */\n    function reflectAll(tasks) {\n        var results;\n        if (Array.isArray(tasks)) {\n            results = tasks.map(reflect);\n        } else {\n            results = {};\n            Object.keys(tasks).forEach(key => {\n                results[key] = reflect.call(this, tasks[key]);\n            });\n        }\n        return results;\n    }\n\n    function reject(eachfn, arr, _iteratee, callback) {\n        const iteratee = wrapAsync(_iteratee);\n        return _filter(eachfn, arr, (value, cb) => {\n            iteratee(value, (err, v) => {\n                cb(err, !v);\n            });\n        }, callback);\n    }\n\n    /**\n     * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n     *\n     * @name reject\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.filter]{@link module:Collections.filter}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - An async truth test to apply to each item in\n     * `coll`.\n     * The should complete with a boolean value as its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * async.reject(['file1','file2','file3'], function(filePath, callback) {\n     *     fs.access(filePath, function(err) {\n     *         callback(null, !err)\n     *     });\n     * }, function(err, results) {\n     *     // results now equals an array of missing files\n     *     createFiles(results);\n     * });\n     */\n    function reject$1 (coll, iteratee, callback) {\n        return reject(eachOf$1, coll, iteratee, callback)\n    }\n    var reject$2 = awaitify(reject$1, 3);\n\n    /**\n     * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name rejectLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.reject]{@link module:Collections.reject}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {Function} iteratee - An async truth test to apply to each item in\n     * `coll`.\n     * The should complete with a boolean value as its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function rejectLimit (coll, limit, iteratee, callback) {\n        return reject(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var rejectLimit$1 = awaitify(rejectLimit, 4);\n\n    /**\n     * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n     *\n     * @name rejectSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.reject]{@link module:Collections.reject}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - An async truth test to apply to each item in\n     * `coll`.\n     * The should complete with a boolean value as its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function rejectSeries (coll, iteratee, callback) {\n        return reject(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var rejectSeries$1 = awaitify(rejectSeries, 3);\n\n    function constant$1(value) {\n        return function () {\n            return value;\n        }\n    }\n\n    /**\n     * Attempts to get a successful response from `task` no more than `times` times\n     * before returning an error. If the task is successful, the `callback` will be\n     * passed the result of the successful task. If all attempts fail, the callback\n     * will be passed the error and result (if any) of the final attempt.\n     *\n     * @name retry\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @see [async.retryable]{@link module:ControlFlow.retryable}\n     * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n     * object with `times` and `interval` or a number.\n     * * `times` - The number of attempts to make before giving up.  The default\n     *   is `5`.\n     * * `interval` - The time to wait between retries, in milliseconds.  The\n     *   default is `0`. The interval may also be specified as a function of the\n     *   retry count (see example).\n     * * `errorFilter` - An optional synchronous function that is invoked on\n     *   erroneous result. If it returns `true` the retry attempts will continue;\n     *   if the function returns `false` the retry flow is aborted with the current\n     *   attempt's error and result being returned to the final callback.\n     *   Invoked with (err).\n     * * If `opts` is a number, the number specifies the number of times to retry,\n     *   with the default interval of `0`.\n     * @param {AsyncFunction} task - An async function to retry.\n     * Invoked with (callback).\n     * @param {Function} [callback] - An optional callback which is called when the\n     * task has succeeded, or after the final failed attempt. It receives the `err`\n     * and `result` arguments of the last attempt at completing the `task`. Invoked\n     * with (err, results).\n     * @returns {Promise} a promise if no callback provided\n     *\n     * @example\n     *\n     * // The `retry` function can be used as a stand-alone control flow by passing\n     * // a callback, as shown below:\n     *\n     * // try calling apiMethod 3 times\n     * async.retry(3, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod 3 times, waiting 200 ms between each retry\n     * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod 10 times with exponential backoff\n     * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n     * async.retry({\n     *   times: 10,\n     *   interval: function(retryCount) {\n     *     return 50 * Math.pow(2, retryCount);\n     *   }\n     * }, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod the default 5 times no delay between each retry\n     * async.retry(apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod only when error condition satisfies, all other\n     * // errors will abort the retry control flow and return to final callback\n     * async.retry({\n     *   errorFilter: function(err) {\n     *     return err.message === 'Temporary error'; // only retry on a specific error\n     *   }\n     * }, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // to retry individual methods that are not as reliable within other\n     * // control flow functions, use the `retryable` wrapper:\n     * async.auto({\n     *     users: api.getUsers.bind(api),\n     *     payments: async.retryable(3, api.getPayments.bind(api))\n     * }, function(err, results) {\n     *     // do something with the results\n     * });\n     *\n     */\n    const DEFAULT_TIMES = 5;\n    const DEFAULT_INTERVAL = 0;\n\n    function retry(opts, task, callback) {\n        var options = {\n            times: DEFAULT_TIMES,\n            intervalFunc: constant$1(DEFAULT_INTERVAL)\n        };\n\n        if (arguments.length < 3 && typeof opts === 'function') {\n            callback = task || promiseCallback();\n            task = opts;\n        } else {\n            parseTimes(options, opts);\n            callback = callback || promiseCallback();\n        }\n\n        if (typeof task !== 'function') {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n\n        var _task = wrapAsync(task);\n\n        var attempt = 1;\n        function retryAttempt() {\n            _task((err, ...args) => {\n                if (err === false) return\n                if (err && attempt++ < options.times &&\n                    (typeof options.errorFilter != 'function' ||\n                        options.errorFilter(err))) {\n                    setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n                } else {\n                    callback(err, ...args);\n                }\n            });\n        }\n\n        retryAttempt();\n        return callback[PROMISE_SYMBOL]\n    }\n\n    function parseTimes(acc, t) {\n        if (typeof t === 'object') {\n            acc.times = +t.times || DEFAULT_TIMES;\n\n            acc.intervalFunc = typeof t.interval === 'function' ?\n                t.interval :\n                constant$1(+t.interval || DEFAULT_INTERVAL);\n\n            acc.errorFilter = t.errorFilter;\n        } else if (typeof t === 'number' || typeof t === 'string') {\n            acc.times = +t || DEFAULT_TIMES;\n        } else {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n    }\n\n    /**\n     * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n     * wraps a task and makes it retryable, rather than immediately calling it\n     * with retries.\n     *\n     * @name retryable\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.retry]{@link module:ControlFlow.retry}\n     * @category Control Flow\n     * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n     * options, exactly the same as from `retry`, except for a `opts.arity` that\n     * is the arity of the `task` function, defaulting to `task.length`\n     * @param {AsyncFunction} task - the asynchronous function to wrap.\n     * This function will be passed any arguments passed to the returned wrapper.\n     * Invoked with (...args, callback).\n     * @returns {AsyncFunction} The wrapped function, which when invoked, will\n     * retry on an error, based on the parameters specified in `opts`.\n     * This function will accept the same parameters as `task`.\n     * @example\n     *\n     * async.auto({\n     *     dep1: async.retryable(3, getFromFlakyService),\n     *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n     *         maybeProcessData(results.dep1, cb);\n     *     })]\n     * }, callback);\n     */\n    function retryable (opts, task) {\n        if (!task) {\n            task = opts;\n            opts = null;\n        }\n        let arity = (opts && opts.arity) || task.length;\n        if (isAsync(task)) {\n            arity += 1;\n        }\n        var _task = wrapAsync(task);\n        return initialParams((args, callback) => {\n            if (args.length < arity - 1 || callback == null) {\n                args.push(callback);\n                callback = promiseCallback();\n            }\n            function taskFn(cb) {\n                _task(...args, cb);\n            }\n\n            if (opts) retry(opts, taskFn, callback);\n            else retry(taskFn, callback);\n\n            return callback[PROMISE_SYMBOL]\n        });\n    }\n\n    /**\n     * Run the functions in the `tasks` collection in series, each one running once\n     * the previous function has completed. If any functions in the series pass an\n     * error to its callback, no more functions are run, and `callback` is\n     * immediately called with the value of the error. Otherwise, `callback`\n     * receives an array of results when `tasks` have completed.\n     *\n     * It is also possible to use an object instead of an array. Each property will\n     * be run as a function, and the results will be passed to the final `callback`\n     * as an object instead of an array. This can be a more readable way of handling\n     *  results from {@link async.series}.\n     *\n     * **Note** that while many implementations preserve the order of object\n     * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n     * explicitly states that\n     *\n     * > The mechanics and order of enumerating the properties is not specified.\n     *\n     * So if you rely on the order in which your series of functions are executed,\n     * and want this to work on all platforms, consider using an array.\n     *\n     * @name series\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n     * [async functions]{@link AsyncFunction} to run in series.\n     * Each function can complete with any number of optional `result` values.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed. This function gets a results array (or object)\n     * containing all the result arguments passed to the `task` callbacks. Invoked\n     * with (err, result).\n     * @return {Promise} a promise, if no callback is passed\n     * @example\n     * async.series([\n     *     function(callback) {\n     *         // do some stuff ...\n     *         callback(null, 'one');\n     *     },\n     *     function(callback) {\n     *         // do some more stuff ...\n     *         callback(null, 'two');\n     *     }\n     * ],\n     * // optional callback\n     * function(err, results) {\n     *     // results is now equal to ['one', 'two']\n     * });\n     *\n     * async.series({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback){\n     *         setTimeout(function() {\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }, function(err, results) {\n     *     // results is now equal to: {one: 1, two: 2}\n     * });\n     */\n    function series(tasks, callback) {\n        return parallel(eachOfSeries$1, tasks, callback);\n    }\n\n    /**\n     * Returns `true` if at least one element in the `coll` satisfies an async test.\n     * If any iteratee call returns `true`, the main `callback` is immediately\n     * called.\n     *\n     * @name some\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias any\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collections in parallel.\n     * The iteratee should complete with a boolean `result` value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the iteratee functions have finished.\n     * Result will be either `true` or `false` depending on the values of the async\n     * tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * async.some(['file1','file2','file3'], function(filePath, callback) {\n     *     fs.access(filePath, function(err) {\n     *         callback(null, !err)\n     *     });\n     * }, function(err, result) {\n     *     // if result is true then at least one of the files exists\n     * });\n     */\n    function some(coll, iteratee, callback) {\n        return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n    }\n    var some$1 = awaitify(some, 3);\n\n    /**\n     * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name someLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.some]{@link module:Collections.some}\n     * @alias anyLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collections in parallel.\n     * The iteratee should complete with a boolean `result` value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the iteratee functions have finished.\n     * Result will be either `true` or `false` depending on the values of the async\n     * tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function someLimit(coll, limit, iteratee, callback) {\n        return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var someLimit$1 = awaitify(someLimit, 4);\n\n    /**\n     * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n     *\n     * @name someSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.some]{@link module:Collections.some}\n     * @alias anySeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collections in series.\n     * The iteratee should complete with a boolean `result` value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the iteratee functions have finished.\n     * Result will be either `true` or `false` depending on the values of the async\n     * tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function someSeries(coll, iteratee, callback) {\n        return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var someSeries$1 = awaitify(someSeries, 3);\n\n    /**\n     * Sorts a list by the results of running each `coll` value through an async\n     * `iteratee`.\n     *\n     * @name sortBy\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a value to use as the sort criteria as\n     * its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} callback - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is the items\n     * from the original `coll` sorted by the values returned by the `iteratee`\n     * calls. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback passed\n     * @example\n     *\n     * async.sortBy(['file1','file2','file3'], function(file, callback) {\n     *     fs.stat(file, function(err, stats) {\n     *         callback(err, stats.mtime);\n     *     });\n     * }, function(err, results) {\n     *     // results is now the original array of files sorted by\n     *     // modified date\n     * });\n     *\n     * // By modifying the callback parameter the\n     * // sorting order can be influenced:\n     *\n     * // ascending order\n     * async.sortBy([1,9,3,5], function(x, callback) {\n     *     callback(null, x);\n     * }, function(err,result) {\n     *     // result callback\n     * });\n     *\n     * // descending order\n     * async.sortBy([1,9,3,5], function(x, callback) {\n     *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n     * }, function(err,result) {\n     *     // result callback\n     * });\n     */\n    function sortBy (coll, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return map$1(coll, (x, iterCb) => {\n            _iteratee(x, (err, criteria) => {\n                if (err) return iterCb(err);\n                iterCb(err, {value: x, criteria});\n            });\n        }, (err, results) => {\n            if (err) return callback(err);\n            callback(null, results.sort(comparator).map(v => v.value));\n        });\n\n        function comparator(left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n    }\n    var sortBy$1 = awaitify(sortBy, 3);\n\n    /**\n     * Sets a time limit on an asynchronous function. If the function does not call\n     * its callback within the specified milliseconds, it will be called with a\n     * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n     *\n     * @name timeout\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} asyncFn - The async function to limit in time.\n     * @param {number} milliseconds - The specified time limit.\n     * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n     * to timeout Error for more information..\n     * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n     * of the control flow functions.\n     * Invoke this function with the same parameters as you would `asyncFunc`.\n     * @example\n     *\n     * function myFunction(foo, callback) {\n     *     doAsyncTask(foo, function(err, data) {\n     *         // handle errors\n     *         if (err) return callback(err);\n     *\n     *         // do some stuff ...\n     *\n     *         // return processed data\n     *         return callback(null, data);\n     *     });\n     * }\n     *\n     * var wrapped = async.timeout(myFunction, 1000);\n     *\n     * // call `wrapped` as you would `myFunction`\n     * wrapped({ bar: 'bar' }, function(err, data) {\n     *     // if `myFunction` takes < 1000 ms to execute, `err`\n     *     // and `data` will have their expected values\n     *\n     *     // else `err` will be an Error with the code 'ETIMEDOUT'\n     * });\n     */\n    function timeout(asyncFn, milliseconds, info) {\n        var fn = wrapAsync(asyncFn);\n\n        return initialParams((args, callback) => {\n            var timedOut = false;\n            var timer;\n\n            function timeoutCallback() {\n                var name = asyncFn.name || 'anonymous';\n                var error  = new Error('Callback function \"' + name + '\" timed out.');\n                error.code = 'ETIMEDOUT';\n                if (info) {\n                    error.info = info;\n                }\n                timedOut = true;\n                callback(error);\n            }\n\n            args.push((...cbArgs) => {\n                if (!timedOut) {\n                    callback(...cbArgs);\n                    clearTimeout(timer);\n                }\n            });\n\n            // setup timer and call original function\n            timer = setTimeout(timeoutCallback, milliseconds);\n            fn(...args);\n        });\n    }\n\n    function range(size) {\n        var result = Array(size);\n        while (size--) {\n            result[size] = size;\n        }\n        return result;\n    }\n\n    /**\n     * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name timesLimit\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.times]{@link module:ControlFlow.times}\n     * @category Control Flow\n     * @param {number} count - The number of times to run the function.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - The async function to call `n` times.\n     * Invoked with the iteration index and a callback: (n, next).\n     * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n     * @returns {Promise} a promise, if no callback is provided\n     */\n    function timesLimit(count, limit, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return mapLimit$1(range(count), limit, _iteratee, callback);\n    }\n\n    /**\n     * Calls the `iteratee` function `n` times, and accumulates results in the same\n     * manner you would use with [map]{@link module:Collections.map}.\n     *\n     * @name times\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.map]{@link module:Collections.map}\n     * @category Control Flow\n     * @param {number} n - The number of times to run the function.\n     * @param {AsyncFunction} iteratee - The async function to call `n` times.\n     * Invoked with the iteration index and a callback: (n, next).\n     * @param {Function} callback - see {@link module:Collections.map}.\n     * @returns {Promise} a promise, if no callback is provided\n     * @example\n     *\n     * // Pretend this is some complicated async factory\n     * var createUser = function(id, callback) {\n     *     callback(null, {\n     *         id: 'user' + id\n     *     });\n     * };\n     *\n     * // generate 5 users\n     * async.times(5, function(n, next) {\n     *     createUser(n, function(err, user) {\n     *         next(err, user);\n     *     });\n     * }, function(err, users) {\n     *     // we should now have 5 users\n     * });\n     */\n    function times (n, iteratee, callback) {\n        return timesLimit(n, Infinity, iteratee, callback)\n    }\n\n    /**\n     * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n     *\n     * @name timesSeries\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.times]{@link module:ControlFlow.times}\n     * @category Control Flow\n     * @param {number} n - The number of times to run the function.\n     * @param {AsyncFunction} iteratee - The async function to call `n` times.\n     * Invoked with the iteration index and a callback: (n, next).\n     * @param {Function} callback - see {@link module:Collections.map}.\n     * @returns {Promise} a promise, if no callback is provided\n     */\n    function timesSeries (n, iteratee, callback) {\n        return timesLimit(n, 1, iteratee, callback)\n    }\n\n    /**\n     * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n     * element in parallel, each step potentially mutating an `accumulator` value.\n     * The type of the accumulator defaults to the type of collection passed in.\n     *\n     * @name transform\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n     * it will default to an empty Object or Array, depending on the type of `coll`\n     * @param {AsyncFunction} iteratee - A function applied to each item in the\n     * collection that potentially modifies the accumulator.\n     * Invoked with (accumulator, item, key, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result is the transformed accumulator.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * async.transform([1,2,3], function(acc, item, index, callback) {\n     *     // pointless async:\n     *     process.nextTick(function() {\n     *         acc[index] = item * 2\n     *         callback(null)\n     *     });\n     * }, function(err, result) {\n     *     // result is now equal to [2, 4, 6]\n     * });\n     *\n     * @example\n     *\n     * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n     *     setImmediate(function () {\n     *         obj[key] = val * 2;\n     *         callback();\n     *     })\n     * }, function (err, result) {\n     *     // result is equal to {a: 2, b: 4, c: 6}\n     * })\n     */\n    function transform (coll, accumulator, iteratee, callback) {\n        if (arguments.length <= 3 && typeof accumulator === 'function') {\n            callback = iteratee;\n            iteratee = accumulator;\n            accumulator = Array.isArray(coll) ? [] : {};\n        }\n        callback = once(callback || promiseCallback());\n        var _iteratee = wrapAsync(iteratee);\n\n        eachOf$1(coll, (v, k, cb) => {\n            _iteratee(accumulator, v, k, cb);\n        }, err => callback(err, accumulator));\n        return callback[PROMISE_SYMBOL]\n    }\n\n    /**\n     * It runs each task in series but stops whenever any of the functions were\n     * successful. If one of the tasks were successful, the `callback` will be\n     * passed the result of the successful task. If all tasks fail, the callback\n     * will be passed the error and result (if any) of the final attempt.\n     *\n     * @name tryEach\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n     * run, each function is passed a `callback(err, result)` it must call on\n     * completion with an error `err` (which can be `null`) and an optional `result`\n     * value.\n     * @param {Function} [callback] - An optional callback which is called when one\n     * of the tasks has succeeded, or all have failed. It receives the `err` and\n     * `result` arguments of the last attempt at completing the `task`. Invoked with\n     * (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     * async.tryEach([\n     *     function getDataFromFirstWebsite(callback) {\n     *         // Try getting the data from the first website\n     *         callback(err, data);\n     *     },\n     *     function getDataFromSecondWebsite(callback) {\n     *         // First website failed,\n     *         // Try getting the data from the backup website\n     *         callback(err, data);\n     *     }\n     * ],\n     * // optional callback\n     * function(err, results) {\n     *     Now do something with the data.\n     * });\n     *\n     */\n    function tryEach(tasks, callback) {\n        var error = null;\n        var result;\n        return eachSeries$1(tasks, (task, taskCb) => {\n            wrapAsync(task)((err, ...args) => {\n                if (err === false) return taskCb(err);\n\n                if (args.length < 2) {\n                    [result] = args;\n                } else {\n                    result = args;\n                }\n                error = err;\n                taskCb(err ? null : {});\n            });\n        }, () => callback(error, result));\n    }\n\n    var tryEach$1 = awaitify(tryEach);\n\n    /**\n     * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n     * unmemoized form. Handy for testing.\n     *\n     * @name unmemoize\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @see [async.memoize]{@link module:Utils.memoize}\n     * @category Util\n     * @param {AsyncFunction} fn - the memoized function\n     * @returns {AsyncFunction} a function that calls the original unmemoized function\n     */\n    function unmemoize(fn) {\n        return (...args) => {\n            return (fn.unmemoized || fn)(...args);\n        };\n    }\n\n    /**\n     * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n     * stopped, or an error occurs.\n     *\n     * @name whilst\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {AsyncFunction} test - asynchronous truth test to perform before each\n     * execution of `iteratee`. Invoked with ().\n     * @param {AsyncFunction} iteratee - An async function which is called each time\n     * `test` passes. Invoked with (callback).\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has failed and repeated execution of `iteratee` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `iteratee`'s\n     * callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * var count = 0;\n     * async.whilst(\n     *     function test(cb) { cb(null, count < 5); },\n     *     function iter(callback) {\n     *         count++;\n     *         setTimeout(function() {\n     *             callback(null, count);\n     *         }, 1000);\n     *     },\n     *     function (err, n) {\n     *         // 5 seconds have passed, n = 5\n     *     }\n     * );\n     */\n    function whilst(test, iteratee, callback) {\n        callback = onlyOnce(callback);\n        var _fn = wrapAsync(iteratee);\n        var _test = wrapAsync(test);\n        var results = [];\n\n        function next(err, ...rest) {\n            if (err) return callback(err);\n            results = rest;\n            if (err === false) return;\n            _test(check);\n        }\n\n        function check(err, truth) {\n            if (err) return callback(err);\n            if (err === false) return;\n            if (!truth) return callback(null, ...results);\n            _fn(next);\n        }\n\n        return _test(check);\n    }\n    var whilst$1 = awaitify(whilst, 3);\n\n    /**\n     * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n     * stopped, or an error occurs. `callback` will be passed an error and any\n     * arguments passed to the final `iteratee`'s callback.\n     *\n     * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n     *\n     * @name until\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.whilst]{@link module:ControlFlow.whilst}\n     * @category Control Flow\n     * @param {AsyncFunction} test - asynchronous truth test to perform before each\n     * execution of `iteratee`. Invoked with (callback).\n     * @param {AsyncFunction} iteratee - An async function which is called each time\n     * `test` fails. Invoked with (callback).\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has passed and repeated execution of `iteratee` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `iteratee`'s\n     * callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if a callback is not passed\n     *\n     * @example\n     * const results = []\n     * let finished = false\n     * async.until(function test(page, cb) {\n     *     cb(null, finished)\n     * }, function iter(next) {\n     *     fetchPage(url, (err, body) => {\n     *         if (err) return next(err)\n     *         results = results.concat(body.objects)\n     *         finished = !!body.next\n     *         next(err)\n     *     })\n     * }, function done (err) {\n     *     // all pages have been fetched\n     * })\n     */\n    function until(test, iteratee, callback) {\n        const _test = wrapAsync(test);\n        return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n    }\n\n    /**\n     * Runs the `tasks` array of functions in series, each passing their results to\n     * the next in the array. However, if any of the `tasks` pass an error to their\n     * own callback, the next function is not executed, and the main `callback` is\n     * immediately called with the error.\n     *\n     * @name waterfall\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n     * to run.\n     * Each function should complete with any number of `result` values.\n     * The `result` values will be passed as arguments, in order, to the next task.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed. This will be passed the results of the last task's\n     * callback. Invoked with (err, [results]).\n     * @returns undefined\n     * @example\n     *\n     * async.waterfall([\n     *     function(callback) {\n     *         callback(null, 'one', 'two');\n     *     },\n     *     function(arg1, arg2, callback) {\n     *         // arg1 now equals 'one' and arg2 now equals 'two'\n     *         callback(null, 'three');\n     *     },\n     *     function(arg1, callback) {\n     *         // arg1 now equals 'three'\n     *         callback(null, 'done');\n     *     }\n     * ], function (err, result) {\n     *     // result now equals 'done'\n     * });\n     *\n     * // Or, with named functions:\n     * async.waterfall([\n     *     myFirstFunction,\n     *     mySecondFunction,\n     *     myLastFunction,\n     * ], function (err, result) {\n     *     // result now equals 'done'\n     * });\n     * function myFirstFunction(callback) {\n     *     callback(null, 'one', 'two');\n     * }\n     * function mySecondFunction(arg1, arg2, callback) {\n     *     // arg1 now equals 'one' and arg2 now equals 'two'\n     *     callback(null, 'three');\n     * }\n     * function myLastFunction(arg1, callback) {\n     *     // arg1 now equals 'three'\n     *     callback(null, 'done');\n     * }\n     */\n    function waterfall (tasks, callback) {\n        callback = once(callback);\n        if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n        if (!tasks.length) return callback();\n        var taskIndex = 0;\n\n        function nextTask(args) {\n            var task = wrapAsync(tasks[taskIndex++]);\n            task(...args, onlyOnce(next));\n        }\n\n        function next(err, ...args) {\n            if (err === false) return\n            if (err || taskIndex === tasks.length) {\n                return callback(err, ...args);\n            }\n            nextTask(args);\n        }\n\n        nextTask([]);\n    }\n\n    var waterfall$1 = awaitify(waterfall);\n\n    /**\n     * An \"async function\" in the context of Async is an asynchronous function with\n     * a variable number of parameters, with the final parameter being a callback.\n     * (`function (arg1, arg2, ..., callback) {}`)\n     * The final callback is of the form `callback(err, results...)`, which must be\n     * called once the function is completed.  The callback should be called with a\n     * Error as its first argument to signal that an error occurred.\n     * Otherwise, if no error occurred, it should be called with `null` as the first\n     * argument, and any additional `result` arguments that may apply, to signal\n     * successful completion.\n     * The callback must be called exactly once, ideally on a later tick of the\n     * JavaScript event loop.\n     *\n     * This type of function is also referred to as a \"Node-style async function\",\n     * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n     * library are themselves CPS/Node-style async functions, or functions that\n     * return CPS/Node-style async functions.\n     *\n     * Wherever we accept a Node-style async function, we also directly accept an\n     * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n     * In this case, the `async` function will not be passed a final callback\n     * argument, and any thrown error will be used as the `err` argument of the\n     * implicit callback, and the return value will be used as the `result` value.\n     * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n     * argument, and a `resolved` value becomes the `result`.)\n     *\n     * Note, due to JavaScript limitations, we can only detect native `async`\n     * functions and not transpilied implementations.\n     * Your environment must have `async`/`await` support for this to work.\n     * (e.g. Node > v7.6, or a recent version of a modern browser).\n     * If you are using `async` functions through a transpiler (e.g. Babel), you\n     * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n     * because the `async function` will be compiled to an ordinary function that\n     * returns a promise.\n     *\n     * @typedef {Function} AsyncFunction\n     * @static\n     */\n\n    var index = {\n        apply,\n        applyEach: applyEach$1,\n        applyEachSeries,\n        asyncify,\n        auto,\n        autoInject,\n        cargo,\n        cargoQueue: cargo$1,\n        compose,\n        concat: concat$1,\n        concatLimit: concatLimit$1,\n        concatSeries: concatSeries$1,\n        constant,\n        detect: detect$1,\n        detectLimit: detectLimit$1,\n        detectSeries: detectSeries$1,\n        dir,\n        doUntil,\n        doWhilst: doWhilst$1,\n        each,\n        eachLimit: eachLimit$2,\n        eachOf: eachOf$1,\n        eachOfLimit: eachOfLimit$2,\n        eachOfSeries: eachOfSeries$1,\n        eachSeries: eachSeries$1,\n        ensureAsync,\n        every: every$1,\n        everyLimit: everyLimit$1,\n        everySeries: everySeries$1,\n        filter: filter$1,\n        filterLimit: filterLimit$1,\n        filterSeries: filterSeries$1,\n        forever: forever$1,\n        groupBy,\n        groupByLimit: groupByLimit$1,\n        groupBySeries,\n        log,\n        map: map$1,\n        mapLimit: mapLimit$1,\n        mapSeries: mapSeries$1,\n        mapValues,\n        mapValuesLimit: mapValuesLimit$1,\n        mapValuesSeries,\n        memoize,\n        nextTick,\n        parallel: parallel$1,\n        parallelLimit,\n        priorityQueue,\n        queue: queue$1,\n        race: race$1,\n        reduce: reduce$1,\n        reduceRight,\n        reflect,\n        reflectAll,\n        reject: reject$2,\n        rejectLimit: rejectLimit$1,\n        rejectSeries: rejectSeries$1,\n        retry,\n        retryable,\n        seq,\n        series,\n        setImmediate: setImmediate$1,\n        some: some$1,\n        someLimit: someLimit$1,\n        someSeries: someSeries$1,\n        sortBy: sortBy$1,\n        timeout,\n        times,\n        timesLimit,\n        timesSeries,\n        transform,\n        tryEach: tryEach$1,\n        unmemoize,\n        until,\n        waterfall: waterfall$1,\n        whilst: whilst$1,\n\n        // aliases\n        all: every$1,\n        allLimit: everyLimit$1,\n        allSeries: everySeries$1,\n        any: some$1,\n        anyLimit: someLimit$1,\n        anySeries: someSeries$1,\n        find: detect$1,\n        findLimit: detectLimit$1,\n        findSeries: detectSeries$1,\n        flatMap: concat$1,\n        flatMapLimit: concatLimit$1,\n        flatMapSeries: concatSeries$1,\n        forEach: each,\n        forEachSeries: eachSeries$1,\n        forEachLimit: eachLimit$2,\n        forEachOf: eachOf$1,\n        forEachOfSeries: eachOfSeries$1,\n        forEachOfLimit: eachOfLimit$2,\n        inject: reduce$1,\n        foldl: reduce$1,\n        foldr: reduceRight,\n        select: filter$1,\n        selectLimit: filterLimit$1,\n        selectSeries: filterSeries$1,\n        wrapSync: asyncify,\n        during: whilst$1,\n        doDuring: doWhilst$1\n    };\n\n    exports.default = index;\n    exports.apply = apply;\n    exports.applyEach = applyEach$1;\n    exports.applyEachSeries = applyEachSeries;\n    exports.asyncify = asyncify;\n    exports.auto = auto;\n    exports.autoInject = autoInject;\n    exports.cargo = cargo;\n    exports.cargoQueue = cargo$1;\n    exports.compose = compose;\n    exports.concat = concat$1;\n    exports.concatLimit = concatLimit$1;\n    exports.concatSeries = concatSeries$1;\n    exports.constant = constant;\n    exports.detect = detect$1;\n    exports.detectLimit = detectLimit$1;\n    exports.detectSeries = detectSeries$1;\n    exports.dir = dir;\n    exports.doUntil = doUntil;\n    exports.doWhilst = doWhilst$1;\n    exports.each = each;\n    exports.eachLimit = eachLimit$2;\n    exports.eachOf = eachOf$1;\n    exports.eachOfLimit = eachOfLimit$2;\n    exports.eachOfSeries = eachOfSeries$1;\n    exports.eachSeries = eachSeries$1;\n    exports.ensureAsync = ensureAsync;\n    exports.every = every$1;\n    exports.everyLimit = everyLimit$1;\n    exports.everySeries = everySeries$1;\n    exports.filter = filter$1;\n    exports.filterLimit = filterLimit$1;\n    exports.filterSeries = filterSeries$1;\n    exports.forever = forever$1;\n    exports.groupBy = groupBy;\n    exports.groupByLimit = groupByLimit$1;\n    exports.groupBySeries = groupBySeries;\n    exports.log = log;\n    exports.map = map$1;\n    exports.mapLimit = mapLimit$1;\n    exports.mapSeries = mapSeries$1;\n    exports.mapValues = mapValues;\n    exports.mapValuesLimit = mapValuesLimit$1;\n    exports.mapValuesSeries = mapValuesSeries;\n    exports.memoize = memoize;\n    exports.nextTick = nextTick;\n    exports.parallel = parallel$1;\n    exports.parallelLimit = parallelLimit;\n    exports.priorityQueue = priorityQueue;\n    exports.queue = queue$1;\n    exports.race = race$1;\n    exports.reduce = reduce$1;\n    exports.reduceRight = reduceRight;\n    exports.reflect = reflect;\n    exports.reflectAll = reflectAll;\n    exports.reject = reject$2;\n    exports.rejectLimit = rejectLimit$1;\n    exports.rejectSeries = rejectSeries$1;\n    exports.retry = retry;\n    exports.retryable = retryable;\n    exports.seq = seq;\n    exports.series = series;\n    exports.setImmediate = setImmediate$1;\n    exports.some = some$1;\n    exports.someLimit = someLimit$1;\n    exports.someSeries = someSeries$1;\n    exports.sortBy = sortBy$1;\n    exports.timeout = timeout;\n    exports.times = times;\n    exports.timesLimit = timesLimit;\n    exports.timesSeries = timesSeries;\n    exports.transform = transform;\n    exports.tryEach = tryEach$1;\n    exports.unmemoize = unmemoize;\n    exports.until = until;\n    exports.waterfall = waterfall$1;\n    exports.whilst = whilst$1;\n    exports.all = every$1;\n    exports.allLimit = everyLimit$1;\n    exports.allSeries = everySeries$1;\n    exports.any = some$1;\n    exports.anyLimit = someLimit$1;\n    exports.anySeries = someSeries$1;\n    exports.find = detect$1;\n    exports.findLimit = detectLimit$1;\n    exports.findSeries = detectSeries$1;\n    exports.flatMap = concat$1;\n    exports.flatMapLimit = concatLimit$1;\n    exports.flatMapSeries = concatSeries$1;\n    exports.forEach = each;\n    exports.forEachSeries = eachSeries$1;\n    exports.forEachLimit = eachLimit$2;\n    exports.forEachOf = eachOf$1;\n    exports.forEachOfSeries = eachOfSeries$1;\n    exports.forEachOfLimit = eachOfLimit$2;\n    exports.inject = reduce$1;\n    exports.foldl = reduce$1;\n    exports.foldr = reduceRight;\n    exports.select = filter$1;\n    exports.selectLimit = filterLimit$1;\n    exports.selectSeries = filterSeries$1;\n    exports.wrapSync = asyncify;\n    exports.during = whilst$1;\n    exports.doDuring = doWhilst$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"],"mappings":"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"}