jQuery(function(e){"use strict";window.wc_sb_checkin={init:function(){wc_sb_common.isCheckinEnabled()&&(e(document.body).on("change","#checkin_country",function(){wc_sb_checkin.loadCheckIn(e(this).val())}),e(document.body).on("click","#change-shipping-info",function(){e("#change-shipping-info").hide(),wc_sb_checkin.showAddressFields()}),wc_sb_checkin.hideAddressFields(),wc_sb_checkin.initCheckIn())},loadCheckIn:function(n){return e.ajax({type:"POST",url:WC_Gateway_Swedbank_Pay_Checkout.ajax_url,data:{action:"swedbank_pay_checkin",nonce:WC_Gateway_Swedbank_Pay_Checkout.nonce,country:n},dataType:"json"}).done(function(n){if(!n.success)return wc_sb_common.logError("sb-checkin-loader",n),void alert(n.details);window.hasOwnProperty("payex")&&window.payex.hasOwnProperty("hostedView")&&void 0!==window.payex.hostedView.consumer&&window.payex.hostedView.consumer().close(),e("script[src*='px.consumer.client']").remove(),e("#swedbank-pay-checkin iframe").remove(),wc_sb_checkin.loadJs(n.data,function(){wc_sb_checkin.initCheckIn()})})},initCheckIn:function(){"undefined"!=typeof payex&&wc_sb_common.waitForLoading("payex.hostedView.consumer",function(e){e?console.warn(e):window.payex.hostedView.consumer({container:"swedbank-pay-checkin",culture:WC_Gateway_Swedbank_Pay_Checkout.culture,style:WC_Gateway_Swedbank_Pay_Checkout.checkInStyle?JSON.parse(WC_Gateway_Swedbank_Pay_Checkout.checkInStyle):null,onConsumerIdentified:function(e){console.log("hostedView: onConsumerIdentified"),wc_sb_checkin.onConsumerIdentified(e)},onNewConsumer:function(e){console.log("hostedView: onNewConsumer"),wc_sb_checkin.onConsumerIdentified(e)},onConsumerRemoved:function(e){console.log("hostedView: onConsumerRemoved")},onBillingDetailsAvailable:function(e){wc_sb_checkin.onAddressDetailsAvailable("billing",e)},onShippingDetailsAvailable:function(e){(WC_Gateway_Swedbank_Pay_Checkout.needs_shipping_address||WC_Gateway_Swedbank_Pay_Checkout.ship_to_billing_address_only)&&wc_sb_checkin.onAddressDetailsAvailable("billing",e),wc_sb_checkin.onAddressDetailsAvailable("shipping",e)},onError:function(e){wc_sb_common.logError("sb-checkin",e),alert(e.details)}}).open()})},onConsumerIdentified:function(n){return console.log("onConsumerIdentified",n),e("#change-shipping-info").show(),e.ajax({type:"POST",url:WC_Gateway_Swedbank_Pay_Checkout.ajax_url,data:{action:"swedbank_pay_checkout_customer_profile",nonce:WC_Gateway_Swedbank_Pay_Checkout.nonce,consumerProfileRef:n.consumerProfileRef},dataType:"json"}).always(function(e){}).done(function(e){console.log(e),e.success?wc_sb_common.isInstantCheckout&&wc_sb_checkout.initCheckout(n.consumerProfileRef):alert(e.data.message)})},onAddressDetailsAvailable:function(n,o){return console.log("onAddressDetailsAvailable",n,o),e("#change-shipping-info").show(),wc_sb_common.block(),e.ajax({type:"POST",url:WC_Gateway_Swedbank_Pay_Checkout.ajax_url,data:{action:"swedbank_pay_checkout_get_address",nonce:WC_Gateway_Swedbank_Pay_Checkout.nonce,type:n,url:o.url},dataType:"json"}).always(function(e){wc_sb_common.unblock()}).done(function(o){if(console.log(o),!o.success)return wc_sb_common.logError("sb-address-details",o),void alert(o.data.message);let c=o.data;e.each(c,function(o,c){[n].forEach(function(n){let i=e('input[name="'+n+"_"+o+'"]');if(0!==i.length&&(i.prop("readonly",!1),i.closest(".form-row").removeClass("swedbank-pay-locked"),i.val(c).change(),"country"===o||"state"===o)){let i=e("#"+n+"_"+o);void 0!==window.Select2?i.select2("val",c):void 0!==e.fn.chosen?i.val(c).trigger("chosen:updated"):i.change()}})}),e(document.body).trigger("update_checkout")})},hideAddressFields:function(){e(".woocommerce-billing-fields__field-wrapper, .woocommerce-shipping-fields").hide()},showAddressFields:function(){e(".woocommerce-billing-fields__field-wrapper, .woocommerce-shipping-fields").show()}},e(document).ready(function(){wc_sb_checkin.init(e("form.checkout, form#order_review, form#add_payment_method"))})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
